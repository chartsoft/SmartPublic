<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Smart.Standard</name>
    </assembly>
    <members>
        <member name="T:Smart.Standard.Attribute.DbTableAttribute">
            <summary>
            Dapper特性,只能声明到class
            </summary>
        </member>
        <member name="P:Smart.Standard.Attribute.DbTableAttribute.PrimaryKey">
            <summary>
            主键
            </summary>
        </member>
        <member name="P:Smart.Standard.Attribute.DbTableAttribute.TableName">
            <summary>
            表名称
            </summary>
        </member>
        <member name="P:Smart.Standard.Attribute.DbTableAttribute.Ignore">
            <summary>
            更新和插入忽略列
            </summary>
        </member>
        <member name="P:Smart.Standard.Attribute.DbTableAttribute.AutoIncrement">
            <summary>
            自增
            </summary>
        </member>
        <member name="T:Smart.Standard.Attribute.EnumDescription">
            <summary>
            把枚举值按照指定的文本显示
            <example>
            EnumDescription.GetEnumText(typeof(MyEnum));
            EnumDescription.GetFieldText(MyEnum.EnumField);
            EnumDescription.GetFieldInfos(typeof(MyEnum));  
            </example>
            </summary>
            <inheritdoc />
            <summary>
            把枚举值按照指定的文本显示
            <example>
            EnumDescription.GetEnumText(typeof(MyEnum));
            EnumDescription.GetFieldText(MyEnum.EnumField);
            EnumDescription.GetFieldInfos(typeof(MyEnum));  
            </example>
            </summary>
        </member>
        <member name="M:Smart.Standard.Attribute.EnumDescription.#ctor(System.String,System.String)">
            <summary>
            描述枚举值
            </summary>
            <param name="enumDisplayText">描述内容</param>
            <param name="constValueText">常量值</param>
        </member>
        <member name="P:Smart.Standard.Attribute.EnumDescription.EnumDisplayText">
            <summary>
            枚举显示文本
            </summary>
        </member>
        <member name="P:Smart.Standard.Attribute.EnumDescription.EnumValue">
            <summary>
            枚举值
            </summary>
        </member>
        <member name="P:Smart.Standard.Attribute.EnumDescription.FieldName">
            <summary>
            字段名称
            </summary>
        </member>
        <member name="P:Smart.Standard.Attribute.EnumDescription.ConstValue">
            <summary>
            ConstValue
            </summary>
        </member>
        <member name="M:Smart.Standard.Attribute.EnumDescription.ToString">
            <summary>
             重写ToString
            </summary>
            <returns>EnumDisplayText</returns>
        </member>
        <member name="M:Smart.Standard.Attribute.EnumDescription.GetEnumText(System.Type)">
            <summary>
            得到对枚举的描述文本
            </summary>
            <param name="enumType">枚举类型</param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Attribute.EnumDescription.GetEnumClassText(System.Type)">
            <summary>
            得到对枚举类的描述文本
            </summary>
            <param name="enumType">枚举类型</param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Attribute.EnumDescription.GetFieldText(System.Object)">
            <summary>
            获得指定枚举类型中，指定值的描述文本。
            </summary>
            <param name="enumValue">枚举值，不要作任何类型转换</param>
            <returns>描述字符串</returns>
        </member>
        <member name="M:Smart.Standard.Attribute.EnumDescription.GetEnumDisplayText(System.Object)">
            <summary>
            获得指定枚举类型中，指定值的描述文本。
            </summary>
            <param name="enumValue">枚举值，不要作任何类型转换</param>
            <returns>描述字符串</returns>
        </member>
        <member name="M:Smart.Standard.Attribute.EnumDescription.GetFieldInfo(System.Object)">
            <summary>
            获得指定枚举类型中，指定值的描述文本。
            </summary>
            <param name="enumValue">枚举值，不要作任何类型转换</param>
            <returns>描述字符串</returns>
        </member>
        <member name="M:Smart.Standard.Attribute.EnumDescription.GetConstValue(System.Object)">
            <summary>
            获取指定枚举中ConstValue的值
            </summary>
            <param name="enumVaule"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Attribute.EnumDescription.GetFieldInfos(System.Type)">
            <summary>
            得到枚举类型定义的所有文本
            </summary>
            <exception cref="T:System.NotSupportedException"></exception>
            <param name="enumType">枚举类型</param>
        </member>
        <member name="M:Smart.Standard.Attribute.EnumDescription.GetFieldInfos(System.Object)">
            <param name="enums">得到枚举类型定义所有文本</param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Attribute.EnumDescription.GetFlagShow``1(``0,System.String)">
            <summary>
            列标签显示
            </summary>
        </member>
        <member name="M:Smart.Standard.Attribute.EnumDescription.GetEnumList``1(``0[])">
            <summary>
            得到枚举项列表
            </summary>
            <param name="ignores">忽略枚举项</param>
        </member>
        <member name="T:Smart.Standard.CheckSum.Adler32">
            <summary>
            Adler-32校验算法，速度优于CRC32校验
            </summary>
        </member>
        <member name="F:Smart.Standard.CheckSum.Adler32.BaseValue">
            <summary>
            largest prime smaller than 65536
            </summary>
        </member>
        <member name="P:Smart.Standard.CheckSum.Adler32.Value">
            <summary>
            校验值
            </summary>
        </member>
        <member name="M:Smart.Standard.CheckSum.Adler32.#ctor">
             <summary>
            创建Adler32校验实例
             </summary>
        </member>
        <member name="M:Smart.Standard.CheckSum.Adler32.Reset">
            <summary>
            重置校验值
            </summary>
        </member>
        <member name="M:Smart.Standard.CheckSum.Adler32.Update(System.Int32)">
            <summary>
            添加校验值
            </summary>
            <param name = "value">
            要添加的校验值，高位忽略
            </param>
        </member>
        <member name="M:Smart.Standard.CheckSum.Adler32.Update(System.Byte[])">
            <summary>
            添加校验值
            </summary>
            <param name="buffer"></param>
            要添加的校验值，高位忽略
        </member>
        <member name="M:Smart.Standard.CheckSum.Adler32.Update(System.Byte[],System.Int32,System.Int32)">
            <summary>
            更新CRC校验值
            </summary>
            <param name = "buffer">
            字节数组
            </param>
            <param name = "offset">
            左偏移量
            </param>
            <param name = "count">
            用于计算的字节长度
            </param>
        </member>
        <member name="T:Smart.Standard.CheckSum.Crc32">
            <summary>
            CRC32校验
            </summary>
        </member>
        <member name="P:Smart.Standard.CheckSum.Crc32.Value">
            <summary>
            校验值
            </summary>
        </member>
        <member name="M:Smart.Standard.CheckSum.Crc32.Reset">
            <summary>
            重置校验值
            </summary>
        </member>
        <member name="M:Smart.Standard.CheckSum.Crc32.Update(System.Int32)">
            <summary>
            更新校验值
            </summary>
            <param name = "value">
            会取value的低8位
            </param>
        </member>
        <member name="M:Smart.Standard.CheckSum.Crc32.Update(System.Byte[])">
            <summary>
            更新对应字节数组的CRC32校验值
            </summary>
            <param name="buffer">
            需要校验的字节数组
            </param>
        </member>
        <member name="M:Smart.Standard.CheckSum.Crc32.Update(System.Byte[],System.Int32,System.Int32)">
            <summary>
            添加计算字节数组
            </summary>
            <param name = "buffer">
            计算CRC值的字节数组
            </param>
            <param name = "offset">
            左偏移量
            </param>
            <param name = "count">
            字节数组中 用于计算的位数
            </param>
        </member>
        <member name="T:Smart.Standard.CheckSum.CrcFactory">
            <summary>
            CRC32校验
            </summary>
        </member>
        <member name="P:Smart.Standard.CheckSum.CrcFactory.Value">
            <summary>
            校验值
            </summary>
        </member>
        <member name="M:Smart.Standard.CheckSum.CrcFactory.Reset">
            <summary>
            重置校验值
            </summary>
        </member>
        <member name="M:Smart.Standard.CheckSum.CrcFactory.Update(System.Int32)">
            <summary>
            更新校验值
            </summary>
            <param name = "value">
            会取value的低8位
            </param>
        </member>
        <member name="M:Smart.Standard.CheckSum.CrcFactory.Update(System.Byte[])">
            <summary>
            更新对应字节数组的CRC32校验值
            </summary>
            <param name="buffer">
            需要校验的字节数组
            </param>
        </member>
        <member name="M:Smart.Standard.CheckSum.CrcFactory.Update(System.Byte[],System.Int32,System.Int32)">
            <summary>
            添加计算字节数组
            </summary>
            <param name = "buffer">
            计算CRC值的字节数组
            </param>
            <param name = "offset">
            左偏移量
            </param>
            <param name = "count">
            字节数组中 用于计算的位数
            </param>
        </member>
        <member name="T:Smart.Standard.CheckSum.ICheckSum">
            <summary>
            校验接口
            </summary>
        </member>
        <member name="P:Smart.Standard.CheckSum.ICheckSum.Value">
            <summary>
            校验值
            </summary>
        </member>
        <member name="M:Smart.Standard.CheckSum.ICheckSum.Reset">
            <summary>
            重置
            </summary>
        </member>
        <member name="M:Smart.Standard.CheckSum.ICheckSum.Update(System.Int32)">
            <summary>
            添加校验值
            </summary>
            <param name = "value">
            要添加的校验值，高位忽略
            </param>
        </member>
        <member name="M:Smart.Standard.CheckSum.ICheckSum.Update(System.Byte[])">
            <summary>
            更新校验值
            </summary>
            <param name="buffer">
            字节数组
            </param>
        </member>
        <member name="M:Smart.Standard.CheckSum.ICheckSum.Update(System.Byte[],System.Int32,System.Int32)">
            <summary>
            添加校验字节数组
            </summary>
            <param name = "buffer">
            字节数组
            </param>
            <param name = "offset">
            左偏移量
            </param>
            <param name = "count">
            用于计算的字节长度
            </param>
        </member>
        <member name="T:Smart.Standard.CheckSum.StrangeCrc">
            <summary>
            Bzip2校验算法
            </summary>
        </member>
        <member name="M:Smart.Standard.CheckSum.StrangeCrc.#ctor">
            <summary>
            初始化 <see cref="T:Smart.Standard.CheckSum.StrangeCrc"></see>实例
            </summary>	
        </member>
        <member name="M:Smart.Standard.CheckSum.StrangeCrc.Reset">
            <summary>
            重置Crc校验值
            </summary>
        </member>
        <member name="P:Smart.Standard.CheckSum.StrangeCrc.Value">
            <summary>
            获取CRC校验值
            </summary>
        </member>
        <member name="M:Smart.Standard.CheckSum.StrangeCrc.Update(System.Int32)">
            <summary>
            添加校验值
            </summary>
            <param name = "value">
            要添加的校验值，高位忽略
            </param>
        </member>
        <member name="M:Smart.Standard.CheckSum.StrangeCrc.Update(System.Byte[])">
            <summary>
            更新校验值
            </summary>
            <param name="buffer">
            字节数组
            </param>
        </member>
        <member name="M:Smart.Standard.CheckSum.StrangeCrc.Update(System.Byte[],System.Int32,System.Int32)">
            <summary>
            更新CRC校验值
            </summary>
            <param name = "buffer">
            字节数组
            </param>
            <param name = "offset">
            左偏移量
            </param>
            <param name = "count">
            用于计算的字节长度
            </param>
        </member>
        <member name="T:Smart.Standard.Consts.RegexStrings">
            <summary>
            正则字符串
            </summary>
        </member>
        <member name="F:Smart.Standard.Consts.RegexStrings.HtmlLabelRegex">
            <summary>
            匹配HTML标记的正则表达式
            </summary>
        </member>
        <member name="F:Smart.Standard.Consts.RegexStrings.PositiveIntegerRegex">
            <summary>
            正整数
            </summary>
        </member>
        <member name="F:Smart.Standard.Consts.RegexStrings.NegativeIntegerRegex">
            <summary>
            负整数
            </summary>
        </member>
        <member name="F:Smart.Standard.Consts.RegexStrings.IntegerRegex">
            <summary>
            整数
            </summary>
        </member>
        <member name="F:Smart.Standard.Consts.RegexStrings.PositiveFloatRegex">
            <summary>
            正浮点数
            </summary>
        </member>
        <member name="F:Smart.Standard.Consts.RegexStrings.NegativeFloatRegex">
            <summary>
            负浮点数
            </summary>
        </member>
        <member name="F:Smart.Standard.Consts.RegexStrings.FloatRegex">
            <summary>
            浮点数
            </summary>
        </member>
        <member name="F:Smart.Standard.Consts.RegexStrings.LetterRegex">
            <summary>
            26个英文字(不区分大小写)
            </summary>
        </member>
        <member name="F:Smart.Standard.Consts.RegexStrings.CapitalLetterRegex">
            <summary>
            26个大写英文字母
            </summary>
        </member>
        <member name="F:Smart.Standard.Consts.RegexStrings.LowercaseRegex">
            <summary>
            26个小写英文字母:
            </summary>
        </member>
        <member name="F:Smart.Standard.Consts.RegexStrings.NumberAndLetterRegex">
            <summary>
            数字和26个英文字母混合
            </summary>
        </member>
        <member name="F:Smart.Standard.Consts.RegexStrings.NumberLetterUnderlineRegex">
            <summary>
            数字和26个英文字母和下划线混合
            </summary>
        </member>
        <member name="F:Smart.Standard.Consts.RegexStrings.EmailRegex">
            <summary>
            Email地址正则表达式
            </summary>
        </member>
        <member name="F:Smart.Standard.Consts.RegexStrings.UrlRegex">
             <summary>
            Url正则表达式
             </summary>
        </member>
        <member name="F:Smart.Standard.Consts.RegexStrings.ChinaPhoneRegex">
            <summary>
            中国电话: 例如：021-8888888 或者0515-88888888 或者 021-88888888-8888
            </summary>
        </member>
        <member name="F:Smart.Standard.Consts.RegexStrings.ChinaPostCodeRegex">
             <summary>
            中国邮政编码 
             </summary>
        </member>
        <member name="F:Smart.Standard.Consts.RegexStrings.ChinaMobileRegex">
            <summary>
            中国手机
            </summary>
        </member>
        <member name="F:Smart.Standard.Consts.RegexStrings.ChinaPhoneAndMobileRegex">
            <summary>
            中国电话包括手机
            </summary>
        </member>
        <member name="F:Smart.Standard.Consts.RegexStrings.QqRegex">
            <summary>
            QQ号
            </summary>
        </member>
        <member name="F:Smart.Standard.Consts.RegexStrings.IpRegex">
            <summary>
            IP地址
            </summary>
        </member>
        <member name="F:Smart.Standard.Consts.RegexStrings.IdentityNo">
            <summary>
            中国身份证号
            </summary>
        </member>
        <member name="T:Smart.Standard.Consts.SmartConsts">
            <summary>
            公共类库使用常量
            </summary>
        </member>
        <member name="F:Smart.Standard.Consts.SmartConsts.XmlParseProviderName">
            <summary>
            Xml解析器提供者名称
            </summary>
        </member>
        <member name="F:Smart.Standard.Consts.SmartConsts.JsonParseProviderName">
            <summary>
            Json解析器提供者名称
            </summary>
        </member>
        <member name="F:Smart.Standard.Consts.SmartConsts.FilterReflex">
            <summary>
            系统过滤
            </summary>
        </member>
        <member name="T:Smart.Standard.Core.AppConfig.AppConfigurtaionServices">
            <summary>
            读取json配置文件类
            </summary>
        </member>
        <member name="P:Smart.Standard.Core.AppConfig.AppConfigurtaionServices.Configuration">
            <summary>
            Configuration
            </summary>
        </member>
        <member name="T:Smart.Standard.Core.AppConfig.ConfigJson">
            <summary>
            ConfigJson
            </summary>
        </member>
        <member name="M:Smart.Standard.Core.AppConfig.ConfigJson.AppsettingsRead(System.String)">
            <summary>
            读配置文件的read
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Core.AppConfig.ConfigJson.ReadConnectionString(System.String)">
            <summary>
            读配置文件的连接字符串
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Core.AppConfig.ConfigJson.ReadConfiguration(System.String)">
            <summary>
            读配置文件json
            "Appsettings:SystemName" 二级
            "ServiceUrl"一级
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Core.AppConfig.ConfigJson.GetValue(System.String,System.String)">
            <summary>
            通过键和节点获取值
            </summary>
            <param name="node"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:Smart.Standard.Core.Jexus.WebHostBuilderJexusExtensions">
            <summary>
            用于处理客户IP地址、端口的HostBuilder中间件
            </summary>
        </member>
        <member name="M:Smart.Standard.Core.Jexus.WebHostBuilderJexusExtensions.UseJexusIntegration(Microsoft.AspNetCore.Hosting.IWebHostBuilder)">
            <summary>
            启用JexusIntegration中间件
            </summary>
            <param name="hostBuilder"></param>
            <returns></returns>
        </member>
        <member name="T:Smart.Standard.Dapper.DapperExtend">
            <summary>
            Dapper扩展类，支持简单的lambda表达式
            </summary>
        </member>
        <member name="M:Smart.Standard.Dapper.DapperExtend.Query``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},Smart.Standard.Enum.DataBaseType,System.Data.IDbTransaction,System.Boolean,System.Nullable{System.Int32})">
            <summary>
            根据lambda表达式查询
            </summary>
            <typeparam name="T"></typeparam>
            <param name="db"></param>
            <param name="expression">lambda表达式</param>
            <param name="dataBaseType"></param>
            <param name="dbTransaction">事务</param>
            <param name="buffered"></param>
            <param name="commandTimeout"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Dapper.DapperExtend.QueryAsync``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},Smart.Standard.Enum.DataBaseType,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            根据lambda表达式查询异步执行方法
            </summary>
            <typeparam name="T"></typeparam>
            <param name="db"></param>
            <param name="expression"></param>
            <param name="dataBaseType"></param>
            <param name="dbTransaction"></param>
            <param name="commandTimeout"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Dapper.DapperExtend.Insert``1(System.Data.IDbConnection,``0,Smart.Standard.Enum.DataBaseType,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            根据模型插入
            </summary>
            <typeparam name="T"></typeparam>
            <param name="db"></param>
            <param name="model"></param>
            <param name="dataBaseType"></param>
            <param name="dbTransaction"></param>
            <param name="commandTimeout"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Dapper.DapperExtend.InsertAsync``1(System.Data.IDbConnection,``0,Smart.Standard.Enum.DataBaseType,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            根据模型插入
            </summary>
            <typeparam name="T"></typeparam>
            <param name="db"></param>
            <param name="model"></param>
            <param name="dataBaseType"></param>
            <param name="dbTransaction"></param>
            <param name="commandTimeout"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Dapper.DapperExtend.BulkInsert``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{``0},Smart.Standard.Enum.DataBaseType,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            批量插入
            </summary>
            <typeparam name="T"></typeparam>
            <param name="db"></param>
            <param name="modelsList"></param>
            <param name="dataBaseType"></param>
            <param name="dbTransaction"></param>
            <param name="commandTimeout"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Dapper.DapperExtend.BulkInsertAsync``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{``0},Smart.Standard.Enum.DataBaseType,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            批量插入异步方法
            </summary>
            <typeparam name="T"></typeparam>
            <param name="db"></param>
            <param name="modelsList"></param>
            <param name="dataBaseType"></param>
            <param name="dbTransaction"></param>
            <param name="commandTimeout"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Dapper.DapperExtend.Update``1(System.Data.IDbConnection,``0,Smart.Standard.Enum.DataBaseType,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            根据模型更新
            </summary>
            <typeparam name="T"></typeparam>
            <param name="db"></param>
            <param name="model"></param>
            <param name="dataBaseType"></param>
            <param name="dbTransaction"></param>
            <param name="commandTimeout"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Dapper.DapperExtend.UpdateAsync``1(System.Data.IDbConnection,``0,Smart.Standard.Enum.DataBaseType,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            根据模型更新
            </summary>
            <typeparam name="T"></typeparam>
            <param name="db"></param>
            <param name="model"></param>
            <param name="dataBaseType"></param>
            <param name="dbTransaction"></param>
            <param name="commandTimeout"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Dapper.DapperExtend.UpdateAsync``1(System.Data.IDbConnection,``0,System.String[],Smart.Standard.Enum.DataBaseType,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            根据模型更新可以指定列
            </summary>
            <typeparam name="T"></typeparam>
            <param name="db"></param>
            <param name="model"></param>
            <param name="changeClos"></param>
            <param name="dataBaseType"></param>
            <param name="dbTransaction"></param>
            <param name="commandTimeout"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Dapper.DapperExtend.Update``1(System.Data.IDbConnection,``0,System.String[],Smart.Standard.Enum.DataBaseType,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            根据模型更新可以指定列
            </summary>
            <typeparam name="T"></typeparam>
            <param name="db"></param>
            <param name="model"></param>
            <param name="changeClos"></param>
            <param name="dataBaseType"></param>
            <param name="dbTransaction"></param>
            <param name="commandTimeout"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Dapper.DapperExtend.UpdateWhere``1(System.Data.IDbConnection,``0,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},Smart.Standard.Enum.DataBaseType,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            根据lambda表达式更新
            </summary>
            <typeparam name="T"></typeparam>
            <param name="db"></param>
            <param name="model"></param>
            <param name="expression"></param>
            <param name="dataBaseType"></param>
            <param name="dbTransaction"></param>
            <param name="commandTimeout"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Dapper.DapperExtend.UpdateWhere``1(System.Data.IDbConnection,``0,System.String[],System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},Smart.Standard.Enum.DataBaseType,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            根据lambda表达式更新指定列
            </summary>
            <typeparam name="T"></typeparam>
            <param name="db"></param>
            <param name="model"></param>
            <param name="changeClos"></param>
            <param name="expression"></param>
            <param name="dataBaseType"></param>
            <param name="dbTransaction"></param>
            <param name="commandTimeout"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Dapper.DapperExtend.UpdateWhereAsync``1(System.Data.IDbConnection,``0,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},Smart.Standard.Enum.DataBaseType,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            根据lambda表达式异步更新
            </summary>
            <typeparam name="T"></typeparam>
            <param name="db"></param>
            <param name="model"></param>
            <param name="expression"></param>
            <param name="dataBaseType"></param>
            <param name="dbTransaction"></param>
            <param name="commandTimeout"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Dapper.DapperExtend.UpdateWhereAsync``1(System.Data.IDbConnection,``0,System.String[],System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},Smart.Standard.Enum.DataBaseType,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            根据lambda表达式更新指定列异步更新
            </summary>
            <typeparam name="T"></typeparam>
            <param name="db"></param>
            <param name="model"></param>
            <param name="changeClos"></param>
            <param name="expression"></param>
            <param name="dataBaseType"></param>
            <param name="dbTransaction"></param>
            <param name="commandTimeout"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Dapper.DapperExtend.BulkUpdate``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{``0},Smart.Standard.Enum.DataBaseType,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            批量更新
            </summary>
            <typeparam name="T"></typeparam>
            <param name="db"></param>
            <param name="modelsList"></param>
            <param name="dataBaseType"></param>
            <param name="dbTransaction"></param>
            <param name="commandTimeout"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Dapper.DapperExtend.BulkUpdateAsync``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{``0},Smart.Standard.Enum.DataBaseType,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            批量异步更新
            </summary>
            <typeparam name="T"></typeparam>
            <param name="db"></param>
            <param name="modelsList"></param>
            <param name="dataBaseType"></param>
            <param name="dbTransaction"></param>
            <param name="commandTimeout"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Dapper.DapperExtend.BulkUpdate``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{``0},System.String[],Smart.Standard.Enum.DataBaseType,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            批量更新指定列
            </summary>
            <typeparam name="T"></typeparam>
            <param name="db"></param>
            <param name="modelsList"></param>
            <param name="changeClos"></param>
            <param name="dataBaseType"></param>
            <param name="dbTransaction"></param>
            <param name="commandTimeout"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Dapper.DapperExtend.BulkUpdateAsync``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{``0},System.String[],Smart.Standard.Enum.DataBaseType,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            批量异步更新指定列
            </summary>
            <typeparam name="T"></typeparam>
            <param name="db"></param>
            <param name="modelsList"></param>
            <param name="changeClos"></param>
            <param name="dataBaseType"></param>
            <param name="dbTransaction"></param>
            <param name="commandTimeout"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Dapper.DapperExtend.DeleteByKey``1(System.Data.IDbConnection,System.Object,Smart.Standard.Enum.DataBaseType,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            通过主键删除
            </summary>
            <typeparam name="T"></typeparam>
            <param name="db"></param>
            <param name="primaryKey"></param>
            <param name="dataBaseType"></param>
            <param name="dbTransaction"></param>
            <param name="commandTimeout"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Dapper.DapperExtend.DeleteByKeyAsync``1(System.Data.IDbConnection,System.Object,Smart.Standard.Enum.DataBaseType,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            通过主键删除
            </summary>
            <typeparam name="T"></typeparam>
            <param name="db"></param>
            <param name="primaryKey"></param>
            <param name="dataBaseType"></param>
            <param name="dbTransaction"></param>
            <param name="commandTimeout"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Dapper.DapperExtend.DeleteByWhere``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},Smart.Standard.Enum.DataBaseType,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            根据lambel表达式删除
            </summary>
            <typeparam name="T"></typeparam>
            <param name="db"></param>
            <param name="whereExpression"></param>
            <param name="dataBaseType"></param>
            <param name="dbTransaction"></param>
            <param name="commandTimeout"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Dapper.DapperExtend.DeleteByWhereAsync``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},Smart.Standard.Enum.DataBaseType,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            通过lambda表达式删除
            </summary>
            <typeparam name="T"></typeparam>
            <param name="db"></param>
            <param name="whereExpression"></param>
            <param name="dataBaseType"></param>
            <param name="dbTransaction"></param>
            <param name="commandTimeout"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Dapper.DapperExtend.BulkDeleTeByKeys``1(System.Data.IDbConnection,System.Object[],Smart.Standard.Enum.DataBaseType,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            根据主键批量删除
            </summary>
            <typeparam name="T"></typeparam>
            <param name="db"></param>
            <param name="primaryKeys"></param>
            <param name="dataBaseType"></param>
            <param name="dbTransaction"></param>
            <param name="commandTimeout"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Dapper.DapperExtend.BulkDeleTeByKeysAsync``1(System.Data.IDbConnection,System.Object[],Smart.Standard.Enum.DataBaseType,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            根据主键批量删除
            </summary>
            <typeparam name="T"></typeparam>
            <param name="db"></param>
            <param name="primaryKeys"></param>
            <param name="dataBaseType"></param>
            <param name="dbTransaction"></param>
            <param name="commandTimeout"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Dapper.DapperExtend.DeleteByModel``1(System.Data.IDbConnection,``0,Smart.Standard.Enum.DataBaseType,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            根据模型删除
            </summary>
            <typeparam name="T"></typeparam>
            <param name="db"></param>
            <param name="model"></param>
            <param name="dataBaseType"></param>
            <param name="dbTransaction"></param>
            <param name="commandTimeout"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Dapper.DapperExtend.DeleteByModelAsync``1(System.Data.IDbConnection,``0,Smart.Standard.Enum.DataBaseType,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            根据模型删除
            </summary>
            <typeparam name="T"></typeparam>
            <param name="db"></param>
            <param name="model"></param>
            <param name="dataBaseType"></param>
            <param name="dbTransaction"></param>
            <param name="commandTimeout"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Dapper.DapperExtend.DeleteByModels``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{``0},Smart.Standard.Enum.DataBaseType,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            根据模型批量删除
            </summary>
            <typeparam name="T"></typeparam>
            <param name="db"></param>
            <param name="modelList"></param>
            <param name="dataBaseType"></param>
            <param name="dbTransaction"></param>
            <param name="commandTimeout"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Dapper.DapperExtend.DeleteByModelsAsync``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{``0},Smart.Standard.Enum.DataBaseType,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            根据模型批量异步删除
            </summary>
            <typeparam name="T"></typeparam>
            <param name="db"></param>
            <param name="modelList"></param>
            <param name="dataBaseType"></param>
            <param name="dbTransaction"></param>
            <param name="commandTimeout"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Dapper.DapperExtend.GetModelByKey``1(System.Data.IDbConnection,System.Object,Smart.Standard.Enum.DataBaseType,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            根据主键获取实体
            </summary>
            <typeparam name="T"></typeparam>
            <param name="db"></param>
            <param name="primaryKey"></param>
            <param name="dataBaseType"></param>
            <param name="dbTransaction"></param>
            <param name="commandTimeout"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Dapper.DapperExtend.GetModelByKeyAsync``1(System.Data.IDbConnection,System.Object,Smart.Standard.Enum.DataBaseType,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            根据主键获取实体
            </summary>
            <typeparam name="T"></typeparam>
            <param name="db"></param>
            <param name="primaryKey"></param>
            <param name="dataBaseType"></param>
            <param name="dbTransaction"></param>
            <param name="commandTimeout"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Dapper.DapperExtend.GetModelWhere``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},Smart.Standard.Enum.DataBaseType,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            根据lambda表达式获取实体
            </summary>
            <typeparam name="T"></typeparam>
            <param name="db"></param>
            <param name="whereExpression"></param>
            <param name="dataBaseType"></param>
            <param name="dbTransaction"></param>
            <param name="commandTimeout"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Dapper.DapperExtend.GetModelWhereAsync``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},Smart.Standard.Enum.DataBaseType,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            根据lambda表达式获取实体
            </summary>
            <typeparam name="T"></typeparam>
            <param name="db"></param>
            <param name="whereExpression"></param>
            <param name="dataBaseType"></param>
            <param name="dbTransaction"></param>
            <param name="commandTimeout"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Dapper.DapperExtend.GetCount``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},Smart.Standard.Enum.DataBaseType,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            获取列表数
            </summary>
            <typeparam name="T"></typeparam>
            <param name="db"></param>
            <param name="whereExpression"></param>
            <param name="dataBaseType"></param>
            <param name="dbTransaction"></param>
            <param name="commandTimeout"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Dapper.DapperExtend.GetCountAsync``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},Smart.Standard.Enum.DataBaseType,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            获取列表数异步方法
            </summary>
            <typeparam name="T"></typeparam>
            <param name="db"></param>
            <param name="whereExpression"></param>
            <param name="dataBaseType"></param>
            <param name="dbTransaction"></param>
            <param name="commandTimeout"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Dapper.DapperExtend.ExitKey``1(System.Data.IDbConnection,System.Object,Smart.Standard.Enum.DataBaseType,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            根据一个主键判断一条记录是否存在
            </summary>
            <typeparam name="T"></typeparam>
            <param name="db"></param>
            <param name="primaryKey"></param>
            <param name="dataBaseType"></param>
            <param name="dbTransaction"></param>
            <param name="commandTimeout"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Dapper.DapperExtend.ExitKeyAsync``1(System.Data.IDbConnection,System.Object,Smart.Standard.Enum.DataBaseType,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            根据一个主键判断一条记录是否存在
            </summary>
            <typeparam name="T"></typeparam>
            <param name="db"></param>
            <param name="primaryKey"></param>
            <param name="dataBaseType"></param>
            <param name="dbTransaction"></param>
            <param name="commandTimeout"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Dapper.DapperExtend.ExitWhere``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},Smart.Standard.Enum.DataBaseType,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            根据lambda表达式判断一条记录是否存在
            </summary>
            <typeparam name="T"></typeparam>
            <param name="db"></param>
            <param name="whereExpression"></param>
            <param name="dataBaseType"></param>
            <param name="dbTransaction"></param>
            <param name="commandTimeout"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Dapper.DapperExtend.ExitWhereAsync``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},Smart.Standard.Enum.DataBaseType,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            根据lambda表达式判断一条记录是否存在
            </summary>
            <typeparam name="T"></typeparam>
            <param name="db"></param>
            <param name="whereExpression"></param>
            <param name="dataBaseType"></param>
            <param name="dbTransaction"></param>
            <param name="commandTimeout"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Dapper.DapperExtend.Page``1(System.Data.IDbConnection,System.String,System.Int32,System.Int32,System.Object,Smart.Standard.Enum.DataBaseType,System.Data.IDbTransaction,System.Boolean,System.Nullable{System.Int32})">
            <summary>
            分页
            </summary>
            <typeparam name="T"></typeparam>
            <param name="db"></param>
            <param name="sql"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="param"></param>
            <param name="dataBaseType"></param>
            <param name="dbTransaction"></param>
            <param name="buffered"></param>
            <param name="commandTimeout"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Dapper.DapperExtend.PageAsync``1(System.Data.IDbConnection,System.String,System.Int32,System.Int32,System.Object,Smart.Standard.Enum.DataBaseType,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            分页异步方法
            </summary>
            <typeparam name="T"></typeparam>
            <param name="db"></param>
            <param name="sql"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="param"></param>
            <param name="dataBaseType"></param>
            <param name="dbTransaction"></param>
            <param name="commandTimeout"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Dapper.DapperExtend.GetIgnorePropertyInfos``1">
            <summary>
            忽略列
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Dapper.DapperExtend.GetDbTableAttr``1">
            <summary>
            获取属性值
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Dapper.DapperExtend.GetIgnoreCloums``1(Smart.Standard.Enum.DataBaseType)">
            <summary>
            去忽略列的其他列
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Dapper.DapperExtend.GetIgnoreWhereParams``1(Smart.Standard.Enum.DataBaseType)">
            <summary>
            去忽略列的其他列带参数
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Dapper.DapperExtend.InsertPgSql``1(System.Data.IDbConnection,``0,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            Pgsql插入
            </summary>
            <typeparam name="T"></typeparam>
            <param name="db"></param>
            <param name="model"></param>
            <param name="dbTransaction"></param>
            <param name="commandTimeout"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Dapper.DapperExtend.InsertPgSqlAsync``1(System.Data.IDbConnection,``0,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            Pgsql插入
            </summary>
            <typeparam name="T"></typeparam>
            <param name="db"></param>
            <param name="model"></param>
            <param name="dbTransaction"></param>
            <param name="commandTimeout"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Dapper.DapperExtend.InsetMsSql``1(System.Data.IDbConnection,``0,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            MsSql插入
            </summary>
            <typeparam name="T"></typeparam>
            <param name="db"></param>
            <param name="model"></param>
            <param name="dbTransaction"></param>
            <param name="commandTimeout"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Dapper.DapperExtend.InsetMsSqlAsync``1(System.Data.IDbConnection,``0,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            MsSql插入
            </summary>
            <typeparam name="T"></typeparam>
            <param name="db"></param>
            <param name="model"></param>
            <param name="dbTransaction"></param>
            <param name="commandTimeout"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Dapper.DapperExtend.BulkDeleTeByKeysMsSql``1(System.Data.IDbConnection,System.Object[],System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="db"></param>
            <param name="primaryKeys"></param>
            <param name="dbTransaction"></param>
            <param name="commandTimeout"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Dapper.DapperExtend.BulkDeleTeByKeysMsSqlAsync``1(System.Data.IDbConnection,System.Object[],System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="db"></param>
            <param name="primaryKeys"></param>
            <param name="dbTransaction"></param>
            <param name="commandTimeout"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Dapper.DapperExtend.BulkDeleTeByKeysPgSql``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{System.Object},System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="db"></param>
            <param name="primaryKeys"></param>
            <param name="dbTransaction"></param>
            <param name="commandTimeout"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Dapper.DapperExtend.BulkDeleTeByKeysPgSqlAsync``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{System.Object},System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="db"></param>
            <param name="primaryKeys"></param>
            <param name="dbTransaction"></param>
            <param name="commandTimeout"></param>
            <returns></returns>
        </member>
        <member name="T:Smart.Standard.Dapper.PagingHelper">
            <summary>
            
            </summary>
        </member>
        <member name="F:Smart.Standard.Dapper.PagingHelper.RxColumns">
            <summary>
            正则列
            </summary>
        </member>
        <member name="F:Smart.Standard.Dapper.PagingHelper.RxOrderBy">
            <summary>
            正则分页
            </summary>
        </member>
        <member name="T:Smart.Standard.Dapper.PagingHelper.SqlParts">
            <summary>
            sql参数
            </summary>
        </member>
        <member name="F:Smart.Standard.Dapper.PagingHelper.SqlParts.Sql">
            <summary>
            
            </summary>
        </member>
        <member name="F:Smart.Standard.Dapper.PagingHelper.SqlParts.SqlCount">
            <summary>
            
            </summary>
        </member>
        <member name="F:Smart.Standard.Dapper.PagingHelper.SqlParts.SqlSelectRemoved">
            <summary>
            
            </summary>
        </member>
        <member name="F:Smart.Standard.Dapper.PagingHelper.SqlParts.SqlOrderBy">
            <summary>
            
            </summary>
        </member>
        <member name="F:Smart.Standard.Dapper.PagingHelper.SqlParts.SqlUnordered">
            <summary>
            
            </summary>
        </member>
        <member name="F:Smart.Standard.Dapper.PagingHelper.SqlParts.SqlColumns">
            <summary>
            
            </summary>
        </member>
        <member name="M:Smart.Standard.Dapper.PagingHelper.SplitSql(System.String,Smart.Standard.Dapper.PagingHelper.SqlParts@)">
            <summary>
            
            </summary>
            <param name="sql"></param>
            <param name="parts"></param>
            <returns></returns>
        </member>
        <member name="T:Smart.Standard.Enum.ClaimKinds">
            <summary>
            Token声明创建
            </summary>
        </member>
        <member name="F:Smart.Standard.Enum.ClaimKinds.Iss">
            <summary>
            jwt签发者
            </summary>
        </member>
        <member name="F:Smart.Standard.Enum.ClaimKinds.Sub">
            <summary>
            jwt所面向的用户
            </summary>
        </member>
        <member name="F:Smart.Standard.Enum.ClaimKinds.Aud">
            <summary>
            接收jwt的一方
            </summary>
        </member>
        <member name="F:Smart.Standard.Enum.ClaimKinds.Exp">
            <summary>
            jwt的过期时间
            </summary>
        </member>
        <member name="F:Smart.Standard.Enum.ClaimKinds.Nbf">
            <summary>
            定义在什么时间之前，该jwt都是不可用的
            </summary>
        </member>
        <member name="F:Smart.Standard.Enum.ClaimKinds.Iat">
            <summary>
            jwt的签发时间
            </summary>
        </member>
        <member name="F:Smart.Standard.Enum.ClaimKinds.Jti">
            <summary>
            jwt的唯一身份标识，主要用来作为一次性token,从而回避重放攻击
            </summary>
        </member>
        <member name="F:Smart.Standard.Enum.ClaimKinds.CusClaim">
             <summary>
            自定义声明
             </summary>
        </member>
        <member name="T:Smart.Standard.Enum.CrcAlgorithmKinds">
            <summary>
            CRC算法类型
            </summary>
        </member>
        <member name="F:Smart.Standard.Enum.CrcAlgorithmKinds.Crc32">
            <summary>
            Crc32
            </summary>
        </member>
        <member name="F:Smart.Standard.Enum.CrcAlgorithmKinds.Adler32">
            <summary>
            Adler32
            </summary>
        </member>
        <member name="F:Smart.Standard.Enum.CrcAlgorithmKinds.StrangeCrc">
            <summary>
            StrangeCrc
            </summary>
        </member>
        <member name="T:Smart.Standard.Enum.DataBaseType">
            <summary>
            数据库类型枚举
            </summary>
        </member>
        <member name="F:Smart.Standard.Enum.DataBaseType.MsSql">
            <summary>
            SqlServer数据库
            </summary>
        </member>
        <member name="F:Smart.Standard.Enum.DataBaseType.PostgreSql">
            <summary>
            PgSql数据库
            </summary>
        </member>
        <member name="T:Smart.Standard.Enum.EllipsisKinds">
            <summary>
            小数尾数处理方法
            </summary>
        </member>
        <member name="F:Smart.Standard.Enum.EllipsisKinds.RoundingDown">
            <summary>
            去尾法
            </summary>
        </member>
        <member name="F:Smart.Standard.Enum.EllipsisKinds.WindUp">
            <summary>
            收尾
            </summary>
        </member>
        <member name="F:Smart.Standard.Enum.EllipsisKinds.Round">
            <summary>
            四舍五入
            </summary>
        </member>
        <member name="F:Smart.Standard.Enum.EllipsisKinds.Atwain">
            <summary>
            四舍六入五成双
            </summary>
        </member>
        <member name="T:Smart.Standard.Enum.ExceptionKinds">
            <summary>
            异常枚举
            </summary>
        </member>
        <member name="F:Smart.Standard.Enum.ExceptionKinds.DataError">
            <summary>
            数据异常
            </summary>
        </member>
        <member name="F:Smart.Standard.Enum.ExceptionKinds.BusinessError">
            <summary>
            业务异常
            </summary>
        </member>
        <member name="F:Smart.Standard.Enum.ExceptionKinds.LogicError">
            <summary>
            逻辑异常
            </summary>
        </member>
        <member name="F:Smart.Standard.Enum.ExceptionKinds.NotsupportError">
            <summary>
            不支持类型异常
            </summary>
        </member>
        <member name="F:Smart.Standard.Enum.ExceptionKinds.ProgramError">
            <summary>
            程序异常
            </summary>
        </member>
        <member name="F:Smart.Standard.Enum.ExceptionKinds.NonemptyError">
            <summary>
            非空异常
            </summary>
        </member>
        <member name="F:Smart.Standard.Enum.ExceptionKinds.RangeError">
            <summary>
            范围异常
            </summary>
        </member>
        <member name="T:Smart.Standard.Enum.HashAlgorithmKinds">
            <summary>
            Hash算法类型
            </summary>
        </member>
        <member name="F:Smart.Standard.Enum.HashAlgorithmKinds.Md5">
            <summary>
            MD5
            </summary>
        </member>
        <member name="F:Smart.Standard.Enum.HashAlgorithmKinds.Ripemd160">
            <summary>
            RIPEMD160
            </summary>
        </member>
        <member name="F:Smart.Standard.Enum.HashAlgorithmKinds.Sha160">
            <summary>
            SHA1
            </summary>
        </member>
        <member name="F:Smart.Standard.Enum.HashAlgorithmKinds.Sha256">
            <summary>
            SHA256
            </summary>
        </member>
        <member name="F:Smart.Standard.Enum.HashAlgorithmKinds.Sha384">
            <summary>
            SHA384
            </summary>
        </member>
        <member name="F:Smart.Standard.Enum.HashAlgorithmKinds.Sha512">
            <summary>
            SHA512
            </summary>
        </member>
        <member name="F:Smart.Standard.Enum.HashAlgorithmKinds.Sha1">
            <summary>
             Sha1
            </summary>
        </member>
        <member name="T:Smart.Standard.Enum.PinYinKinds">
            <summary>
            获取拼音类型枚举
            </summary>
        </member>
        <member name="F:Smart.Standard.Enum.PinYinKinds.Simple">
            <summary>
            简单模式，返回不带声调的拼音，遇到多音字则返回第一条
            </summary>
        </member>
        <member name="F:Smart.Standard.Enum.PinYinKinds.WithTone">
            <summary>
            返回带声调的拼音
            </summary>
        </member>
        <member name="F:Smart.Standard.Enum.PinYinKinds.WithMultiplePronunciations">
            <summary>
            返回所有多音字的拼音
            </summary>
        </member>
        <member name="F:Smart.Standard.Enum.PinYinKinds.WithToneAndMultiplePronunciations">
            <summary>
            返回所有多音字，并且带声调
            </summary>
        </member>
        <member name="T:Smart.Standard.Enum.RegexKinds">
            <summary>
            正则匹配枚举
            </summary>
        </member>
        <member name="F:Smart.Standard.Enum.RegexKinds.HtmlLabel">
            <summary>
            网页标签
            </summary>
        </member>
        <member name="F:Smart.Standard.Enum.RegexKinds.PositiveInteger">
            <summary>
            正整数
            </summary>
        </member>
        <member name="F:Smart.Standard.Enum.RegexKinds.NegativeInteger">
            <summary>
            负整数
            </summary>
        </member>
        <member name="F:Smart.Standard.Enum.RegexKinds.Integer">
            <summary>
            整数
            </summary>
        </member>
        <member name="F:Smart.Standard.Enum.RegexKinds.PositiveFloat">
            <summary>
            正浮点数
            </summary>
        </member>
        <member name="F:Smart.Standard.Enum.RegexKinds.NegativeFloat">
            <summary>
            负浮点数
            </summary>
        </member>
        <member name="F:Smart.Standard.Enum.RegexKinds.Float">
            <summary>
            浮点数
            </summary>
        </member>
        <member name="F:Smart.Standard.Enum.RegexKinds.Letter">
            <summary>
            26个英文字(不区分大小写)
            </summary>
        </member>
        <member name="F:Smart.Standard.Enum.RegexKinds.CapitalLetter">
            <summary>
            26个大写英文字母
            </summary>
        </member>
        <member name="F:Smart.Standard.Enum.RegexKinds.Lowercase">
            <summary>
            26个小写英文字母
            </summary>
        </member>
        <member name="F:Smart.Standard.Enum.RegexKinds.NumberAndLetter">
            <summary>
            数字和26个英文字母混合
            </summary>
        </member>
        <member name="F:Smart.Standard.Enum.RegexKinds.NumberLetterUnderline">
            <summary>
            数字和26个英文字母和下划线混合
            </summary>
        </member>
        <member name="F:Smart.Standard.Enum.RegexKinds.Email">
            <summary>
            Email地址正则表达式
            </summary>
        </member>
        <member name="F:Smart.Standard.Enum.RegexKinds.Url">
            <summary>
            Url正则表达式
            </summary>
        </member>
        <member name="F:Smart.Standard.Enum.RegexKinds.ChinaPhone">
            <summary>
            中国电话: 例如：021-8888888 或者0515-88888888 或者 021-88888888-8888
            </summary>
        </member>
        <member name="F:Smart.Standard.Enum.RegexKinds.ChinaPost">
             <summary>
            中国邮政编码 
             </summary>
        </member>
        <member name="F:Smart.Standard.Enum.RegexKinds.ChinaMobile">
            <summary>
            中国手机
            </summary>
        </member>
        <member name="F:Smart.Standard.Enum.RegexKinds.ChinaPhoneAndMobile">
            <summary>
            中国电话包括手机
            </summary>
        </member>
        <member name="F:Smart.Standard.Enum.RegexKinds.Qq">
            <summary>
            QQ号
            </summary>
        </member>
        <member name="F:Smart.Standard.Enum.RegexKinds.Ip">
            <summary>
            IP地址
            </summary>
        </member>
        <member name="F:Smart.Standard.Enum.RegexKinds.IdentityNo">
            <summary>
            中国身份证号
            </summary>
        </member>
        <member name="T:Smart.Standard.Enum.StatesKinds">
            <summary>
            状态枚举
            </summary>
        </member>
        <member name="F:Smart.Standard.Enum.StatesKinds.Enable">
            <summary>
            可用
            </summary>
        </member>
        <member name="F:Smart.Standard.Enum.StatesKinds.DissEnable">
            <summary>
            不可用
            </summary>
        </member>
        <member name="F:Smart.Standard.Enum.StatesKinds.Remove">
            <summary>
            移除
            </summary>
        </member>
        <member name="F:Smart.Standard.Enum.StatesKinds.Expire">
            <summary>
            到期
            </summary>
        </member>
        <member name="F:Smart.Standard.Enum.StatesKinds.Lock">
            <summary>
            锁定
            </summary>
        </member>
        <member name="F:Smart.Standard.Enum.StatesKinds.UnLock">
            <summary>
            解锁
            </summary>
        </member>
        <member name="F:Smart.Standard.Enum.StatesKinds.NotAudit">
            <summary>
            未审核
            </summary>
        </member>
        <member name="F:Smart.Standard.Enum.StatesKinds.AuditPass">
            <summary>
            审核通过
            </summary>
        </member>
        <member name="F:Smart.Standard.Enum.StatesKinds.AuditRefuse">
            <summary>
            审核未通过
            </summary>
        </member>
        <member name="F:Smart.Standard.Enum.StatesKinds.CashOut">
            <summary>
            提现中
            </summary>
        </member>
        <member name="F:Smart.Standard.Enum.StatesKinds.Success">
            <summary>
            成功
            </summary>
        </member>
        <member name="F:Smart.Standard.Enum.StatesKinds.Fail">
            <summary>
            失败
            </summary>
        </member>
        <member name="T:Smart.Standard.Enum.StateStatic">
            <summary>
            states 类
            </summary>
        </member>
        <member name="M:Smart.Standard.Enum.StateStatic.SetEnable(Smart.Standard.Enum.StatesKinds)">
            <summary>
            设置为可用
            </summary>
            <param name="statesKinds"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Enum.StateStatic.SetDissEnable(Smart.Standard.Enum.StatesKinds)">
            <summary>
            设置不可用
            </summary>
            <param name="statesKinds"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Enum.StateStatic.SetLock(Smart.Standard.Enum.StatesKinds)">
            <summary>
            设置锁定
            </summary>
            <param name="statesKinds"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Enum.StateStatic.SetUnLock(Smart.Standard.Enum.StatesKinds)">
            <summary>
            设置解锁
            </summary>
            <param name="statesKinds"></param>
            <returns></returns>
        </member>
        <member name="T:Smart.Standard.ExpressionVisitor.Evaluator">
            <summary>
            Evaluator类公开了一个静态方法“PartialEval”，您可以调用该方法来评估表达式中的这些子树，只留下具有实际值的常量节点。 
            这个代码中的大部分是最大子树的划分，可以隔离评估。实际的评估是微不足道的，因为子树可以使用LambaExpression.Compile“编译”，变成一个委托，然后被调用。
            您可以在SubtreeVisitor.Evaluate方法中看到这一点。
            确定最大子树的过程分两步进行。首先通过Nominator类中的自下而上的步骤，确定哪些节点可能被孤立地评估，然后在SubtreeEvaluator中自上而下的步骤，找到表示提名的子树的最高节点。
            提名者由您提供的函数进行参数化，可以采用您想要确定某些给定节点是否可以隔离评估的任何启发式方法。默认启发式是除了ExpresssionType.Parameter之外的任何节点都可以隔离求值。 
            除此之外，一般规则指出，如果子节点无法在本地计算，则父节点也不能。因此，无法评估参数上游的任何节点，并保留在树中。一切都将被评估并替换为常量。 
            </summary>
        </member>
        <member name="T:Smart.Standard.ExpressionVisitor.Evaluator.SubtreeEvaluator">
            <summary>
            子树评估
            </summary>
        </member>
        <member name="M:Smart.Standard.ExpressionVisitor.Evaluator.SubtreeEvaluator.Eval(System.Linq.Expressions.Expression)">
            <summary>
            绑定子树的值
            </summary>
            <param name="exp"></param>
            <returns></returns>
        </member>
        <member name="T:Smart.Standard.ExpressionVisitor.Evaluator.Nominator">
            <summary>
            指定者指定候选人
            </summary>
        </member>
        <member name="M:Smart.Standard.ExpressionVisitor.Evaluator.Nominator.Nominate(System.Linq.Expressions.Expression)">
            <summary>
            指定候选人
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.ExpressionVisitor.ExpressionHelper.GetOperator(System.Linq.Expressions.ExpressionType)">
            <summary>
            获取Expression NodeType表示的操作符
            </summary>
            <param name="nodeType"></param>
            <returns></returns>
        </member>
        <member name="T:Smart.Standard.ExpressionVisitor.ExpressionParameterizedSqlWriter">
            <summary>
            参数化的sql语句
            </summary>
        </member>
        <member name="F:Smart.Standard.ExpressionVisitor.ExpressionParameterizedSqlWriter.MNodeType">
            <summary>
            
            </summary>
        </member>
        <member name="F:Smart.Standard.ExpressionVisitor.ExpressionParameterizedSqlWriter.MLeft">
            <summary>
            
            </summary>
        </member>
        <member name="F:Smart.Standard.ExpressionVisitor.ExpressionParameterizedSqlWriter.MParameters">
            <summary>
            
            </summary>
        </member>
        <member name="M:Smart.Standard.ExpressionVisitor.ExpressionParameterizedSqlWriter.#ctor(System.Collections.Generic.List{System.Object},Smart.Standard.Enum.DataBaseType)">
            <summary>
            
            </summary>
            <param name="parameters"></param>
            <param name="dataBaseType"></param>
        </member>
        <member name="M:Smart.Standard.ExpressionVisitor.ExpressionParameterizedSqlWriter.Translate(System.Linq.Expressions.Expression)">
            <summary>
            
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.ExpressionVisitor.ExpressionParameterizedSqlWriter.VisitBinary(System.Linq.Expressions.BinaryExpression)">
            <summary>
            
            </summary>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.ExpressionVisitor.ExpressionParameterizedSqlWriter.VisitMemberAccess(System.Linq.Expressions.MemberExpression)">
            <summary>
            
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.ExpressionVisitor.ExpressionParameterizedSqlWriter.VisitConstant(System.Linq.Expressions.ConstantExpression)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Smart.Standard.ExpressionVisitor.ExpressionParameterizedSqlWriter.VisitUnary(System.Linq.Expressions.UnaryExpression)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Smart.Standard.ExpressionVisitor.ExpressionParameterizedSqlWriter.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            
            </summary>
        </member>
        <member name="T:Smart.Standard.ExpressionVisitor.ExpressionSqlWriter">
            <summary>
            Sql语句
            </summary>
        </member>
        <member name="F:Smart.Standard.ExpressionVisitor.ExpressionSqlWriter._mSb">
            <summary>
            
            </summary>
        </member>
        <member name="M:Smart.Standard.ExpressionVisitor.ExpressionSqlWriter.#ctor(Smart.Standard.Enum.DataBaseType)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Smart.Standard.ExpressionVisitor.ExpressionSqlWriter.Translate(System.Linq.Expressions.Expression)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Smart.Standard.ExpressionVisitor.ExpressionSqlWriter.VisitBinary(System.Linq.Expressions.BinaryExpression)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Smart.Standard.ExpressionVisitor.ExpressionSqlWriter.VisitMemberAccess(System.Linq.Expressions.MemberExpression)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Smart.Standard.ExpressionVisitor.ExpressionSqlWriter.VisitConstant(System.Linq.Expressions.ConstantExpression)">
            <summary>
            VisitConstant
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.ExpressionVisitor.ExpressionSqlWriter.VisitUnary(System.Linq.Expressions.UnaryExpression)">
            <summary>
            VisitUnary
            </summary>
        </member>
        <member name="M:Smart.Standard.ExpressionVisitor.ExpressionSqlWriter.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            VisitMethodCall
            </summary>
        </member>
        <member name="T:Smart.Standard.ExpressionVisitor.ExpressionVisitor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Smart.Standard.ExpressionVisitor.ExpressionVisitor.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Smart.Standard.ExpressionVisitor.ExpressionVisitor.Visit(System.Linq.Expressions.Expression)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Smart.Standard.ExpressionVisitor.ExpressionVisitor.VisitBinding(System.Linq.Expressions.MemberBinding)">
            <summary>
            VisitBinding
            </summary>
            <param name="binding"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.ExpressionVisitor.ExpressionVisitor.VisitElementInitializer(System.Linq.Expressions.ElementInit)">
            <summary>
            VisitElementInitializer
            </summary>
            <param name="initializer"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.ExpressionVisitor.ExpressionVisitor.VisitUnary(System.Linq.Expressions.UnaryExpression)">
            <summary>
            VisitUnary
            </summary>
            <param name="u"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.ExpressionVisitor.ExpressionVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression)">
            <summary>
            VisitBinary
            </summary>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.ExpressionVisitor.ExpressionVisitor.VisitTypeIs(System.Linq.Expressions.TypeBinaryExpression)">
            <summary>
            VisitTypeIs
            </summary>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.ExpressionVisitor.ExpressionVisitor.VisitConstant(System.Linq.Expressions.ConstantExpression)">
            <summary>
            VisitConstant
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.ExpressionVisitor.ExpressionVisitor.VisitConditional(System.Linq.Expressions.ConditionalExpression)">
            <summary>
            VisitConditional
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.ExpressionVisitor.ExpressionVisitor.VisitParameter(System.Linq.Expressions.ParameterExpression)">
            <summary>
            VisitParameter
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.ExpressionVisitor.ExpressionVisitor.VisitMemberAccess(System.Linq.Expressions.MemberExpression)">
            <summary>
            VisitMemberAccess
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.ExpressionVisitor.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            VisitMethodCall
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.ExpressionVisitor.ExpressionVisitor.VisitExpressionList(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression})">
            <summary>
            VisitExpressionList
            </summary>
            <param name="original"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.ExpressionVisitor.ExpressionVisitor.VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)">
            <summary>
            VisitMemberAssignment
            </summary>
            <param name="assignment"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.ExpressionVisitor.ExpressionVisitor.VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)">
            <summary>
            VisitMemberMemberBinding
            </summary>
            <param name="binding"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.ExpressionVisitor.ExpressionVisitor.VisitBindingList(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.MemberBinding})">
            <summary>
            VisitBindingList
            </summary>
            <param name="original"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.ExpressionVisitor.ExpressionVisitor.VisitMemberListBinding(System.Linq.Expressions.MemberListBinding)">
            <summary>
            VisitMemberListBinding
            </summary>
            <param name="binding"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.ExpressionVisitor.ExpressionVisitor.VisitElementInitializerList(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.ElementInit})">
            <summary>
            VisitElementInitializerList
            </summary>
            <param name="original"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.ExpressionVisitor.ExpressionVisitor.VisitLambda(System.Linq.Expressions.LambdaExpression)">
            <summary>
            VisitLambda
            </summary>
            <param name="lambda"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.ExpressionVisitor.ExpressionVisitor.VisitNew(System.Linq.Expressions.NewExpression)">
            <summary>
            VisitNew
            </summary>
            <param name="nex"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.ExpressionVisitor.ExpressionVisitor.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)">
            <summary>
            VisitMemberInit
            </summary>
            <param name="init"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.ExpressionVisitor.ExpressionVisitor.VisitListInit(System.Linq.Expressions.ListInitExpression)">
            <summary>
            VisitListInit
            </summary>
            <param name="init"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.ExpressionVisitor.ExpressionVisitor.VisitNewArray(System.Linq.Expressions.NewArrayExpression)">
            <summary>
            VisitNewArray
            </summary>
            <param name="na"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.ExpressionVisitor.ExpressionVisitor.VisitInvocation(System.Linq.Expressions.InvocationExpression)">
            <summary>
            VisitInvocation
            </summary>
            <param name="iv"></param>
            <returns></returns>
        </member>
        <member name="T:Smart.Standard.Extends.ByteExtends">
            <summary>
            字符串扩展
            </summary>
        </member>
        <member name="M:Smart.Standard.Extends.ByteExtends.ToHexString(System.Byte[])">
            <summary>
            byte数组转16进制字符串
            </summary>
            <param name="bytes">byte数组</param>
            <returns>16进制字符串</returns>
        </member>
        <member name="M:Smart.Standard.Extends.ByteExtends.ToHexString2(System.Byte[])">
            <summary>
            byte数组转16进制字符串
            </summary>
            <param name="bytes">byte数组</param>
            <returns>16进制字符串</returns>
        </member>
        <member name="M:Smart.Standard.Extends.ByteExtends.BytesToStream(System.Byte[])">
            <summary>
            将 byte[] 转成 Stream
            </summary>
        </member>
        <member name="T:Smart.Standard.Extends.CharExtends">
            <summary>
            字符扩展类
            </summary>
        </member>
        <member name="M:Smart.Standard.Extends.CharExtends.GetPinYinCount(System.Char)">
            <summary>
            返回单个简体中文字的拼音个数
            </summary>
            <param name="inputChar">简体中文单字</param>      
        </member>
        <member name="M:Smart.Standard.Extends.CharExtends.GetPinYinWithTone(System.Char)">
            <summary>
            返回单个简体中文字的拼音列表
            </summary>
            <param name="inputChar">简体中文单字</param> 
        </member>
        <member name="T:Smart.Standard.Extends.DataRowExtends">
            <summary>
            DataRow扩展方法
            </summary>
        </member>
        <member name="M:Smart.Standard.Extends.DataRowExtends.FieldIsNullOrNotExist(System.Data.DataRow,System.String)">
            <summary>
            字段是否为空或者不存在
            </summary>
            <param name="dr">数据源</param>
            <param name="fieldName">字段名称</param>
            <returns>不存在或者为Null返回true。</returns>
        </member>
        <member name="T:Smart.Standard.Extends.DataTableExends">
            <summary>
            dataTable扩展类
            </summary>
        </member>
        <member name="M:Smart.Standard.Extends.DataTableExends.ToList``1(System.Data.DataTable)">
            <summary>  
            dataTable转list
            </summary>  
            <param name="dt"></param>  
            <returns></returns>  
        </member>
        <member name="T:Smart.Standard.Extends.DateTimeExtends">
            <summary>
            日期类型的扩展方法
            </summary>
        </member>
        <member name="F:Smart.Standard.Extends.DateTimeExtends.MinSqlServerDateTime">
            <summary>
            T-SQL最小时间，按照smalldatetime作为依据确定
            </summary>
        </member>
        <member name="F:Smart.Standard.Extends.DateTimeExtends.MaxSqlServerDateTime">
            <summary>
            T-SQL最大时间，按照smalldatetime作为依据确定
            </summary>
        </member>
        <member name="M:Smart.Standard.Extends.DateTimeExtends.ToDateString(System.Nullable{System.DateTime})">
            <summary>
            转为日期字符串
            </summary>
            <param name="dateTime">可空日期</param>
            <returns>yyyy-MM-dd表示的日期，或空字符串</returns>
        </member>
        <member name="M:Smart.Standard.Extends.DateTimeExtends.ToDateString(System.DateTime)">
            <summary>
            转为日期字符串
            </summary>
            <param name="dateTime">日期</param>
            <returns>yyyy-MM-dd表示的日期，或空字符串</returns>
        </member>
        <member name="M:Smart.Standard.Extends.DateTimeExtends.ToDateTimeString(System.Nullable{System.DateTime})">
            <summary>
            转为日期时间字符串
            </summary>
            <param name="dateTime">可空日期</param>
            <returns>yyyy-MM-dd HH:mm表示的日期，或空字符串</returns>
        </member>
        <member name="M:Smart.Standard.Extends.DateTimeExtends.ToDateTimeString(System.DateTime)">
            <summary>
            转为日期时间字符串，精确到分
            <para>格式：yyyy-MM-dd HH:mm</para>
            </summary>
            <param name="dateTime">日期</param>
            <returns>yyyy-MM-dd HH:mm表示的日期，或空字符串</returns>
        </member>
        <member name="M:Smart.Standard.Extends.DateTimeExtends.ToDateTimeStringSecond(System.DateTime)">
            <summary>
            转为日期时间字符串,精确到秒 
            <para>格式：yyyy-MM-dd HH:mm:ss</para>
            </summary>
        </member>
        <member name="M:Smart.Standard.Extends.DateTimeExtends.IsValidSqlServerDateTime(System.DateTime)">
            <summary>
            判断日期时间是否是合法的数据库日期时间值
            </summary>
            <param name="dateTime">日期</param>
            <returns>有效true，无效false</returns>
        </member>
        <member name="M:Smart.Standard.Extends.DateTimeExtends.GetValidSqlServerDateTimeOrNow(System.DateTime)">
            <summary>
            获取有效的SQL时间或当前日期
            </summary>
            <param name="dateTime">日期</param>
            <returns>有效日期本身，无效DateTime.Now</returns>
        </member>
        <member name="M:Smart.Standard.Extends.DateTimeExtends.ToUnixTimestamp(System.DateTime)">
            <summary>
            转换为Unix时间戳（毫秒）
            </summary>
            <param name="dateTime">日期</param>
            <returns>毫秒</returns>
        </member>
        <member name="M:Smart.Standard.Extends.DateTimeExtends.ToUnixTimeSeconds(System.DateTime)">
            <summary>
            转换为Unix时间戳（秒）
            </summary>
            <param name="dateTime">日期</param>
            <returns>秒</returns>
        </member>
        <member name="M:Smart.Standard.Extends.DateTimeExtends.GetLunarDateTime(System.DateTime)">
            <summary>
            获取农历日期
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Extends.DateTimeExtends.ThisMonday(System.DateTime)">
            <summary>
            获取本周周一
            </summary>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Extends.DateTimeExtends.NextMonday(System.DateTime)">
            <summary>
            获取下周周一
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Extends.DateTimeExtends.ThisMonthStart(System.DateTime)">
            <summary>
            获取本月1号
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Extends.DateTimeExtends.NextMonthStart(System.DateTime)">
            <summary>
            获取下月一号
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="T:Smart.Standard.Extends.EnumerableExtends">
            <summary>
            Enumerable扩展方法
            </summary>
        </member>
        <member name="M:Smart.Standard.Extends.EnumerableExtends.IsNullOrEmpty(System.Collections.IEnumerable)">
            <summary>
            是否为空
            </summary>
        </member>
        <member name="M:Smart.Standard.Extends.EnumerableExtends.IsNotNullOrEmpty(System.Collections.IEnumerable)">
            <summary>
            是否不为空
            </summary>
            <param name="lst"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Extends.EnumerableExtends.IsNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            是否为空
            </summary>
        </member>
        <member name="M:Smart.Standard.Extends.EnumerableExtends.IsNotNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            是否不为空
            </summary>
            <param name="lst"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Extends.EnumerableExtends.SafeForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0},System.Func{``0,System.Boolean},System.Boolean)">
            <summary>
            安全ForEach,当lst不为空，且lst中满足predicate条件的项存在时才执行循环操作
            </summary>
            <param name="lst">数据</param>
            <param name="action">循环执行方法体</param>
            <param name="predicate">循环筛选谓词，true执行，false不执行</param>
            <param name="changeList">循环执行方法体 是否变更了数据</param>
        </member>
        <member name="M:Smart.Standard.Extends.EnumerableExtends.Join``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            将一个集合分割成1,2,3的字符串
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumerable"></param>
            <param name="separator">分割符号</param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Extends.EnumerableExtends.SequenceSortEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            先排序然后依次判断两个集合里面的元素是否相等
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sourceEnumerable"></param>
            <param name="targeteEnumerable"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Extends.EnumerableExtends.ToPgsqlDapper(System.Collections.Generic.IEnumerable{System.Object},System.String@)">
            <summary>
            转成dapper参数 特殊处理
            </summary>
            <param name="sourceEnumerable"></param>
            <param name="sqlParam"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Extends.EnumerableExtends.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{System.Int32,``0})">
            <summary>
            lst集合forEach循环扩展
            </summary>
            <typeparam name="T"></typeparam>
            <param name="lst"></param>
            <param name="action">执行方法(index,item)={}</param>
        </member>
        <member name="M:Smart.Standard.Extends.EnumerableExtends.SliceExt``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            切片(范围)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="lst"></param>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="T:Smart.Standard.Extends.EnumExtends">
            <summary>
            枚举扩展方法
            </summary>
        </member>
        <member name="M:Smart.Standard.Extends.EnumExtends.GetEnumText(System.Enum)">
            <summary>
            得到对枚举的描述文本
            </summary>
            <param name="emuEnum"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Extends.EnumExtends.GetEnumClassText(System.Enum)">
            <summary>
            得到对枚举的类描述文本
            </summary>
            <param name="emuEnum"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Extends.EnumExtends.GetFieldText(System.Enum)">
            <summary>
            获取枚举文本
            </summary>
            <param name="emEnum"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Extends.EnumExtends.GetEnumDisplayText(System.Enum)">
            <summary>
            获取枚举文本
            </summary>
            <param name="emEnum"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Extends.EnumExtends.GetFieldInfo(System.Enum)">
            <summary>
            获取枚举EnumDescription类型
            </summary>
            <param name="enumValue"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Extends.EnumExtends.GetConstValue(System.Enum)">
            <summary>
            获取枚举定义的常量值
            </summary>
            <param name="enumValue"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Extends.EnumExtends.AddFlags``1(``0,``0)">
            <summary>
            添加枚举
            </summary>
            <param name="enumValue"></param>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Extends.EnumExtends.RemoveFlags``1(``0,``0)">
            <summary>
            移除枚举
            </summary>
            <param name="enumValue"></param>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Extends.EnumExtends.ToIntArray``1(``0)">
            <summary>
            转换成数组
            </summary>
            <typeparam name="TEnum"></typeparam>
            <param name="statesKinds"></param>
            <returns></returns>
        </member>
        <member name="T:Smart.Standard.Extends.ExpressionToSql">
            <summary>
            lambda表达式转sql
            </summary>
        </member>
        <member name="M:Smart.Standard.Extends.ExpressionToSql.ToSql``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},Dapper.DynamicParameters@,Smart.Standard.Enum.DataBaseType)">
            <summary>
            将lambda表达式转换成带参数的dynamicParameters
            </summary>
            <typeparam name="T"></typeparam>
            <param name="condition"></param>
            <param name="dynamicParameters"></param>
            <param name="dataBaseType"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Extends.ExpressionToSql.ToSql``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},Smart.Standard.Enum.DataBaseType)">
            <summary>
            将lambda表达式转换成sql
            </summary>
            <typeparam name="T"></typeparam>
            <param name="condition"></param>
            <param name="dataBaseType"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Extends.ExpressionToSql.ToSql``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Object[]@,Smart.Standard.Enum.DataBaseType)">
            <summary>
            将lambda表达式转换成bject[]
            </summary>
            <typeparam name="T"></typeparam>
            <param name="condition"></param>
            <param name="objects"></param>
            <param name="dataBaseType"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Extends.ExpressionToSql.GetPropertyName``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            获取属性名称
            </summary>
        </member>
        <member name="M:Smart.Standard.Extends.ExpressionToSql.GetPropertyName``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            获取属性名称
            </summary>
        </member>
        <member name="T:Smart.Standard.Extends.FileHelper">
            <summary>
            文件帮助类
            </summary>
        </member>
        <member name="M:Smart.Standard.Extends.FileHelper.FileCompare(System.String,System.String)">
            <summary>
            比较两个文件是否相同
            <para>通过CRC32/MD5/SHA1三种比较，防止哈希碰撞</para>
            </summary>
            <param name="file1"></param>
            <param name="file2"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Extends.FileHelper.Md5Value(System.String)">
            <summary>
            文件MD5值
            </summary>
            <param name="fileName">文件名称</param>
            <returns>返回MD5值</returns>
        </member>
        <member name="M:Smart.Standard.Extends.FileHelper.Sha1Value(System.String)">
            <summary>
            文件哈希值
            </summary>
            <param name="fileName">文件名称</param>
            <returns>返回哈希值</returns>
        </member>
        <member name="M:Smart.Standard.Extends.FileHelper.CrcValue(System.String,Smart.Standard.Enum.CrcAlgorithmKinds)">
            <summary>
            CRC校验值
            </summary>
            <param name="fileName">文件名</param>
            <param name="crcKind">CRC校验类型</param>
            <returns>校验值</returns>
        </member>
        <member name="M:Smart.Standard.Extends.FileHelper.HashFile(System.String,Smart.Standard.Enum.HashAlgorithmKinds)">
            <summary>
            计算文件的哈希值
            </summary>
            <param name="fileName">要计算哈希值的文件名和路径</param>
            <param name="hashKind">Hash算法类型</param>
            <returns>哈希值16进制字符串</returns>
        </member>
        <member name="M:Smart.Standard.Extends.FileHelper.SaveFile(System.String,System.Byte[],System.Int32,System.Int32)">
            <summary>
            保存文件
            </summary>
            <param name="dstPath">目标路径eg:C:\Temp\a.txt</param>
            <param name="buffer">要保存的二进制流buffer</param>
            <param name="start">buffer的起始读取位</param>
            <param name="length">buffer的读取长度</param>
        </member>
        <member name="T:Smart.Standard.Extends.DataReaderExtends">
            <summary>
            IDataReader扩展方法
            </summary>
        </member>
        <member name="M:Smart.Standard.Extends.DataReaderExtends.ToDataSet(System.Data.IDataReader)">
            <summary>
            IDataReader转DataSet
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Extends.DataReaderExtends.ToDataTable(System.Data.IDataReader)">
            <summary>
            IDataReader转DataTable
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Extends.DataReaderExtends.ToDataTables(System.Data.IDataReader)">
            <summary>
            IDataReader转 IEnumerable<DataTable/>
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="T:Smart.Standard.Extends.IntExtends">
            <summary>
            Int扩展类
            </summary>
        </member>
        <member name="M:Smart.Standard.Extends.IntExtends.HasFlag(System.Int32,System.Int32)">
            <summary>
            判断是否存在
            </summary>
            <param name="states"></param>
            <param name="flag"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Extends.IntExtends.HasFlag(System.Int32,System.Enum)">
            <summary>
            判断是否存在该状态
            </summary>
            <param name="states"></param>
            <param name="flag"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Extends.IntExtends.ToAry(System.Int64,System.Int32)">
            <summary>
            10进制转换成多进制
            </summary>
            <param name="x"></param>
            <param name="ary"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Extends.IntExtends.ToAry(System.Int32,System.Int32)">
            <summary>
            10进制转换成多进制
            </summary>
            <param name="x"></param>
            <param name="ary"></param>
            <returns></returns>
        </member>
        <member name="T:Smart.Standard.Extends.ListExtensions">
            <summary>
            <see cref="T:System.Collections.Generic.List`1"/> 扩展方法
            </summary>
        </member>
        <member name="M:Smart.Standard.Extends.ListExtensions.MoveToEnd``1(System.Collections.Generic.List{``0},System.Predicate{``0})">
            <summary>
            移动到最后
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="itemSelector"></param>
        </member>
        <member name="M:Smart.Standard.Extends.ListExtensions.MoveToBeginning``1(System.Collections.Generic.List{``0},System.Predicate{``0})">
            <summary>
            移动到最顶端
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="itemSelector"></param>
        </member>
        <member name="M:Smart.Standard.Extends.ListExtensions.MoveUp``1(System.Collections.Generic.List{``0},``0)">
            <summary>
            上移
            </summary>
        </member>
        <member name="M:Smart.Standard.Extends.ListExtensions.MoveDown``1(System.Collections.Generic.List{``0},``0)">
            <summary>
            下移
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="item"></param>
        </member>
        <member name="M:Smart.Standard.Extends.ListExtensions.Move``1(System.Collections.Generic.List{``0},System.Predicate{``0},System.Int32)">
            <summary>
            移动一个元素到
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="itemSelector"></param>
            <param name="newIndex"></param>
        </member>
        <member name="M:Smart.Standard.Extends.ListExtensions.ToDataTable``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            IEnumerable转化成DataTable
            </summary>
        </member>
        <member name="T:Smart.Standard.Extends.MethodExtends">
            <summary>
            方法扩展
            </summary>
        </member>
        <member name="M:Smart.Standard.Extends.MethodExtends.GetAttribute``1(System.Reflection.MethodInfo)">
            <summary>
            取得自定义特性
            </summary>
            <typeparam name="T">自定义Attribute类型</typeparam>
            <param name="method">方法信息</param>
            <returns>T实例</returns>
        </member>
        <member name="M:Smart.Standard.Extends.MethodExtends.GetCnNames(System.Enum,System.Collections.Generic.Dictionary{System.Enum,System.String})">
            <summary>
            枚举类型根据名称字典获取中文名称串的扩展方法
            </summary>
            <param name="en"></param>
            <param name="dict">该枚举类型的中文名称字典</param>
            <returns>转换后的中文名称串，如果缺少中文定义将抛异常</returns>
        </member>
        <member name="T:Smart.Standard.Extends.ObjectExtends">
            <summary>
            Object扩展方法
            </summary>
        </member>
        <member name="M:Smart.Standard.Extends.ObjectExtends.RemoveEvent``1(``0,System.Delegate,System.String)">
            <summary>
            移除事件绑定
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="entity">实体</param>
            <param name="eventDelegate">事件委托</param>
            <param name="eventName">事件名称</param>
        </member>
        <member name="M:Smart.Standard.Extends.ObjectExtends.ConvertTo``1(System.Object)">
            <summary>
            转换对象为特定的类型，默认值为 default(T)
            </summary>
            <typeparam name = "T">要转换的类型</typeparam>
            <param name = "value">要转换的object</param>
            <returns>转换后T</returns>
        </member>
        <member name="M:Smart.Standard.Extends.ObjectExtends.ConvertTo``1(System.Object,``0)">
            <summary>
            转换对象为特定的类型，默认值为 default(T)
            </summary>
            <typeparam name = "T">要转换的类型</typeparam>
            <param name = "value">要转换的object</param>
            <param name="defaultValue">默认值</param>
            <returns>转换后T</returns>
        </member>
        <member name="M:Smart.Standard.Extends.ObjectExtends.ConvertTo``1(System.Object,``0,System.Boolean)">
            <summary>
            转换对象为特定的类型，默认值为 default(T)
            </summary>
            <typeparam name = "T">要转换的类型</typeparam>
            <param name = "value">要转换的object</param>
            <param name="defaultValue">默认值</param>
            <param name="ignoreException">忽略异常</param>
            <returns>转换后T</returns>
        </member>
        <member name="M:Smart.Standard.Extends.ObjectExtends.CanConvertTo``1(System.Object)">
            <summary>
            对象是否能被转换为特定的类型
            </summary>
            <param name="value">对象</param>
        </member>
        <member name="M:Smart.Standard.Extends.ObjectExtends.CanConvertTo(System.Object,System.Type)">
            <summary>
            对象是否能被转换为特定的类型
            </summary>
            true则value可以转换为T，否则false
            <param name="targetType">类型</param>
            <param name="value">对象</param>
        </member>
        <member name="M:Smart.Standard.Extends.ObjectExtends.InvokeMethod(System.Object,System.String,System.Object[])">
            <summary>
            通过反射动态调用方法methodName
            </summary>
            <param name = "obj">持有方法的对象</param>
            <param name = "methodName">方法名</param>
            <param name = "parameters">参数列表</param>
            <returns>方法返回值</returns>
        </member>
        <member name="M:Smart.Standard.Extends.ObjectExtends.InvokeMethod``1(System.Object,System.String,System.Object[])">
            <summary>
            通过反射动态调用方法methodName，返回强类型对象
            </summary>
            <typeparam name = "T">期望返回的类型</typeparam>
            <param name = "obj">持有方法的对象</param>
            <param name = "methodName">方法名</param>
            <param name = "parameters">参数列表</param>
            <returns>返回值</returns>
        </member>
        <member name="M:Smart.Standard.Extends.ObjectExtends.GetPropertyValue(System.Object,System.String)">
            <summary>
            通过反射动态获取属性值
            </summary>
            <param name = "obj">持有属性的对象</param>
            <param name = "propertyName">属性名</param>
            <returns>属性值</returns>
        </member>
        <member name="M:Smart.Standard.Extends.ObjectExtends.GetPropertyValue``1(System.Object,System.String,``0)">
            <summary>
            取得强类型属性值
            </summary>
            <typeparam name = "T">返回值类型</typeparam>
            <param name = "obj">持有属性的对象</param>
            <param name="defaultValue">默认值</param>
            <param name = "propertyName">属性名</param>
            <returns>属性值</returns>
        </member>
        <member name="M:Smart.Standard.Extends.ObjectExtends.SetPropertyValue(System.Object,System.String,System.Object)">
            <summary>
            动态设置属性值
            </summary>
            <param name = "obj">要设置属性的对象</param>
            <param name = "propertyName">属性名</param>
            <param name = "value">值</param>
        </member>
        <member name="M:Smart.Standard.Extends.ObjectExtends.GetAttribute``1(System.Object)">
            <summary>
            取得对象的标签实例
            </summary>
            <typeparam name = "T">要取得的的标签类型</typeparam>
            <param name = "obj">要获取的对象实例</param>
            <returns>标签实例</returns>
        </member>
        <member name="M:Smart.Standard.Extends.ObjectExtends.GetAttribute``1(System.Object,System.Boolean)">
            <summary>
            取得对象的标签实例
            </summary>
            <typeparam name = "T">要取得的的标签类型</typeparam>
            <param name = "obj">要获取的对象实例</param>
            <param name="includeInherited">是否包括继承的类型</param>
            <returns>标签实例</returns>
        </member>
        <member name="M:Smart.Standard.Extends.ObjectExtends.GetAttributes``1(System.Object)">
            <summary>
            取得所有的T类型标签
            </summary>
            <typeparam name = "T">标签类型</typeparam>
            <param name = "obj">获取对象</param>
            <returns>所有T类型标签</returns>
        </member>
        <member name="M:Smart.Standard.Extends.ObjectExtends.GetAttributes``1(System.Object,System.Boolean)">
            <summary>
            取得所有的T类型标签
            </summary>
            <typeparam name = "T">标签类型</typeparam>
            <param name = "obj">获取对象</param>
            <param name="includeInherited">是否包括继承的类型</param>
            <returns>所有T类型标签</returns>
        </member>
        <member name="M:Smart.Standard.Extends.ObjectExtends.IsType``1(System.Object)">
            <summary>
            对象是否为T类型
            </summary>
        </member>
        <member name="M:Smart.Standard.Extends.ObjectExtends.GetTypeDefaultValue``1(``0)">
            <summary>
            取得对应类型默认值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Extends.ObjectExtends.AsString(System.Object)">
            <summary>
            转换为string
            </summary>
            <returns>
            target=null返回null，否则等同于ToString()
            </returns>
            <param name = "target">要ToString的对象</param>
        </member>
        <member name="M:Smart.Standard.Extends.ObjectExtends.CastTo``1(System.Object)">
            <summary>
            转换类型
            </summary>
        </member>
        <member name="M:Smart.Standard.Extends.ObjectExtends.CastTo(System.Object,System.Type)">
            <summary>
            转换类型
            </summary>
        </member>
        <member name="M:Smart.Standard.Extends.ObjectExtends.Clone``1(``0)">
            <summary>
            克隆对象(深度克隆)
            </summary>
            <typeparam name="T">克隆对象类型</typeparam>
            <param name="source">克隆源</param>
            <returns>深度克隆对象</returns>
        </member>
        <member name="M:Smart.Standard.Extends.ObjectExtends.PackJson``1(``0)">
            <summary>
            Json打包对象
            </summary>
            <param name="entity">实体对象</param>
            <typeparam name="T">对象类型</typeparam>
            <returns>序列化后字符串</returns>
        </member>
        <member name="M:Smart.Standard.Extends.ObjectExtends.PackXml``1(``0)">
            <summary>
            Xml打包对象
            </summary>
            <param name="entity">实体对象</param>
            <typeparam name="T">对象类型</typeparam>
            <returns>序列化后字符串</returns>
        </member>
        <member name="M:Smart.Standard.Extends.ObjectExtends.Pack``1(``0,System.String)">
            <summary>
            打包对象
            </summary>
            <typeparam name="T">克隆对象类型</typeparam>
            <param name="entity">实体对象</param>
            <param name="parserName">解析器名称</param>
            <returns>序列化后字符串</returns>
        </member>
        <member name="M:Smart.Standard.Extends.ObjectExtends.Ellipsis(System.Object,System.Int32,Smart.Standard.Enum.EllipsisKinds)">
            <summary>
            银行数字计算方法
            </summary>
            <param name="number">未处理的数字</param>
            <param name="digits">保留几位</param>
            <param name="ellipsisKinds">算法枚举默认四舍六入五成双</param>
            <returns></returns>
        </member>
        <member name="T:Smart.Standard.Extends.ObjectMapper">
            <summary>
            对象映射器类
                用于将对象的属性值按名称映射到另外一个对象
                
            </summary>
        </member>
        <member name="M:Smart.Standard.Extends.ObjectMapper.Map``2(``0,System.Action{``0,``1})">
            <summary>
            获取指定类型的对象，并从源对象获取同名属性值
            </summary>
            <typeparam name="TSource">源对象类型</typeparam>
            <typeparam name="TTarget">目标对象类型</typeparam>
            <param name="sourceObject">源对象</param>
            <param name="customeConvertAction">对实体执行的自定义操作，不应该有对模型的修改代码</param>
            <returns>目标对象</returns>
        </member>
        <member name="M:Smart.Standard.Extends.ObjectMapper.Map``2(System.Collections.Generic.IEnumerable{``0},System.Action{``0,``1})">
            <summary>
            获取指定类型的对象的列表，并从源列表中对象获取同名属性值
            </summary>
            <typeparam name="TSource">源对象类型</typeparam>
            <typeparam name="TTarget">目标对象类型</typeparam>
            <param name="sourceObjectList">源对象列表</param>
            <param name="customeConvertAction">对实体执行的自定义操作，不应该有对模型的修改代码</param>
            <returns>目标对象列表</returns>
        </member>
        <member name="M:Smart.Standard.Extends.ObjectMapper.ConvertObject``2(System.Object)">
            <summary>
            获取指定类型的对象，并从源对象获取同名属性值
            </summary>
            <typeparam name="TSource">源对象类型</typeparam>
            <typeparam name="TTarget">目标对象类型</typeparam>
            <param name="sourceObject">源对象</param>
            <returns>目标对象</returns>
        </member>
        <member name="M:Smart.Standard.Extends.ObjectMapper.GetOrCreatePropertiesDictionary(System.Type)">
            <summary>
            从字典中获取指定类型的属性列表，如果不存在则创建
            </summary>
            <param name="sourceType">指定类型</param>
            <returns>所有属性列表</returns>
        </member>
        <member name="T:Smart.Standard.Extends.PropertyExtends">
            <summary>
            属性扩展
            </summary>
        </member>
        <member name="M:Smart.Standard.Extends.PropertyExtends.GetAttribute``1(System.Reflection.PropertyInfo)">
            <summary>
            取得对应属性的T自定义标签实例
            </summary>
            <typeparam name="T">自定义标签类型</typeparam>
            <param name="property">属性信息</param>
            <returns>自定义标签实例</returns>
        </member>
        <member name="T:Smart.Standard.Extends.StreamExtends">
            <summary>
            流扩展方法
            </summary>
        </member>
        <member name="M:Smart.Standard.Extends.StreamExtends.StreamToBytes(System.IO.Stream)">
            <summary>
            将 Stream 转成 byte[]
            </summary>
        </member>
        <member name="T:Smart.Standard.Extends.StringExtend">
            <summary>
            字符串扩展类
            </summary>
        </member>
        <member name="M:Smart.Standard.Extends.StringExtend.CutStringLength(System.String,System.Int32,System.String)">
            <summary>
            截取标题字数
            </summary>
            <param name="str">准备截取的字符串</param>
            <param name="len">截取长度</param>
            <param name="suffix">超过长度显示字符串</param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Extends.StringExtend.GetChineseInitial(System.String)">
            <summary>
            取得拼音首字母
            </summary>
            <param name="str">字符串</param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Extends.StringExtend.ToHash(System.String,Smart.Standard.Enum.HashAlgorithmKinds)">
            <summary>
            Hash加密
            </summary>
            <param name="str">字符串</param>
            <param name="hashAlgorithm">哈希类型</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException">未实现对应的哈希Algorithm</exception>
        </member>
        <member name="M:Smart.Standard.Extends.StringExtend.DesEncrypt(System.String,System.String)">
            <summary>  
            DES加密算法
            </summary>  
            <param name="pToEncrypt">需要加密的字符串</param>  
            <param name="sKey">密钥</param>  
            <returns></returns>  
        </member>
        <member name="M:Smart.Standard.Extends.StringExtend.DesDecrypt(System.String,System.String)">
            <summary>  
            DES解密算法
            </summary>  
            <param name="pToDecrypt">需要解密的字符串</param>  
            <param name="sKey">密钥</param>  
            <returns></returns>  
        </member>
        <member name="M:Smart.Standard.Extends.StringExtend.Left(System.String,System.Int32)">
            <summary>
            取左
            </summary>
        </member>
        <member name="M:Smart.Standard.Extends.StringExtend.Right(System.String,System.Int32)">
            <summary>
            取右
            </summary>
        </member>
        <member name="M:Smart.Standard.Extends.StringExtend.Middle(System.String,System.Int32,System.Int32)">
            <summary>
            取中
            </summary>
        </member>
        <member name="M:Smart.Standard.Extends.StringExtend.IsDate(System.String)">
            <summary>
            是否是日期
            </summary>
        </member>
        <member name="M:Smart.Standard.Extends.StringExtend.IsInt(System.String)">
            <summary>
            是否Int型
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Extends.StringExtend.IsBool(System.String)">
            <summary>
            是否Bool型
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Extends.StringExtend.Isdecimal(System.String)">
            <summary>
            是否Decimal型
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Extends.StringExtend.IsTinyint(System.String)">
            <summary>
            是否Tinyint型
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Extends.StringExtend.IsIp(System.String)">
            <summary>
            判断是否为IP地址
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Extends.StringExtend.IsRegex(System.String,Smart.Standard.Enum.RegexKinds)">
            <summary>
            正则匹配
            </summary>
            <param name="value"></param>
            <param name="regexKinds"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Extends.StringExtend.ToDateTime(System.String)">
            <summary>
            将string转为DateTime，如果字符串不是正确的日期值，将返回DateTime.MinValue
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Extends.StringExtend.ToDateTimeNullable(System.String)">
            <summary>
            将string转为DateTime，如果字符串不是正确的日期值，将返回null
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Extends.StringExtend.ToInt(System.String,System.Int32)">
            <summary>
            将字符串转为数字,如果转换失败则返回默认值
            </summary>
            <param name="source">字符串</param>
            <param name="defaultValue">转换失败时返回的默认值</param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Extends.StringExtend.AddCommaSplit(System.String)">
            <summary>
            将字符串前面加逗号扩展方法
            </summary>
            <param name="source">字符串</param>
            <returns>添加了逗号分隔的字符串</returns>
        </member>
        <member name="M:Smart.Standard.Extends.StringExtend.AddDoubleQuotes(System.String)">
            <summary>
            加双引号
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Extends.StringExtend.ParseJson``1(System.String)">
            <summary>
            解析Json实体
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="val">值</param>
            <returns>实体实例</returns>
        </member>
        <member name="M:Smart.Standard.Extends.StringExtend.ParseXml``1(System.String)">
            <summary>
            解析Xml实体
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="val">值</param>
            <returns>实体实例</returns>
        </member>
        <member name="M:Smart.Standard.Extends.StringExtend.ParseEntity``1(System.String,System.String)">
            <summary>
            解析实体
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="val">值</param>
            <param name="providerName"> </param>
            <returns>实体实例</returns>
        </member>
        <member name="M:Smart.Standard.Extends.StringExtend.FormatJson(System.String)">
            <summary>
            格式化json字符串
            </summary>
            <param name="jsonstr"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Extends.StringExtend.FormatXml(System.String)">
            <summary>
            格式化xml字符串
            </summary>
            <param name="xmlstr"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Extends.StringExtend.GetPinYin(System.String,Smart.Standard.Enum.PinYinKinds,System.String)">
            <summary>
            获取拼音
            </summary>
            <param name="source">要获取拼音的文字</param>
            <param name="mode">获取模式</param>
            <param name="spliter">字之间的分隔符</param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Extends.StringExtend.GetPinYinCombination(System.String,System.String,System.String)">
            <summary>
            获取词组所有可能的拼音组合
            </summary>
            <param name="source">要获取拼音的文字</param>
            <param name="singleWordSpliter">单个字之间的分隔符</param>
            <param name="wordTermSpliter">词字之间的分隔符</param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Extends.StringExtend.GetAcronym(System.String)">
            <summary>
            获取首字母缩写词
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Extends.StringExtend.ToHexString(System.String)">
            <summary>
            转换16进制字符串
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Extends.StringExtend.ClearAllHtml(System.String)">
            <summary>
            清除Html字符
            </summary>
        </member>
        <member name="M:Smart.Standard.Extends.StringExtend.SliceExt(System.String,System.String)">
            <summary>
            切片slice
            </summary>
            <param name="str"></param>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="T:Smart.Standard.Extends.TypeExtends">
            <summary>
            Type扩展
            </summary>
        </member>
        <member name="M:Smart.Standard.Extends.TypeExtends.GetAttribute``1(System.Type)">
            <summary>
            取得type的T特性实例
            </summary>
            <typeparam name="T">特性类型</typeparam>
            <param name="type">Type实例</param>
            <returns>T实例</returns>
        </member>
        <member name="M:Smart.Standard.Extends.TypeExtends.GetInstance(System.Type)">
            <summary>
            取得Type实例对象
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Extends.TypeExtends.GetMethodInfos(System.Type,System.Boolean)">
            <summary>
            返回一个类所有方法的集合
            </summary>
            <param name="type"></param>
            <param name="isfilter"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Extends.TypeExtends.GetTypesByBase(System.Type)">
            <summary>
            获取所有基类的子类
            </summary>
            <param name="baseType"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Extends.TypeExtends.GetTypesByBase(System.Type,System.String)">
            <summary>
            获取所有基类的子类
            </summary>
            <param name="baseType"></param>
            <param name="dllName"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Extends.TypeExtends.IsSubClassOf(System.Type,System.Type)">
            <summary>
            判断一个是不是基类的子类
            </summary>
            <param name="type"></param>
            <param name="baseType"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Extends.TypeExtends.IsNumericType(System.Type)">
            <summary>
            判断是否为数值类型。
            </summary>
            <param name="t">要判断的类型</param>
            <returns>是否为数值类型</returns>
        </member>
        <member name="M:Smart.Standard.Extends.TypeExtends.IsNumericOrNullableNumericType(System.Type)">
            <summary>
            判断是否为可空数值类型。
            </summary>
            <param name="t">要判断的类型</param>
            <returns>是否为可空数值类型</returns>
        </member>
        <member name="M:Smart.Standard.Extends.TypeExtends.IsNullableType(System.Type)">
            <summary>
            
            判断是否为可空类型。
            注意，直接调用可空对象的.GetType()方法返回的会是其泛型值的实际类型，用其进行此判断肯定返回false。
            </summary>
            <param name="t">要判断的类型</param>
            <returns>是否为可空类型</returns>
        </member>
        <member name="M:Smart.Standard.Extends.TypeExtends.GetPropertyDisplayName(System.Type,System.String)">
            <summary>
            取属性的显示名称
            </summary>
            <param name="type">Type</param>
            <param name="propertyName">属性名</param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Extends.TypeExtends.GetPropertyAttribute``1(System.Type,System.String)">
            <summary>
            取属性的attribute
            </summary>
            <param name="type">Type</param>
            <param name="propertyName">属性名</param>
            <typeparam name="T">attribute</typeparam>
            <returns>attribute</returns>
        </member>
        <member name="T:Smart.Standard.FastReflection.Cache.ConstructorInvokerCache">
            <summary>
            ConstructorInvoker缓存
            </summary>
        </member>
        <member name="M:Smart.Standard.FastReflection.Cache.ConstructorInvokerCache.Create(System.Reflection.ConstructorInfo)">
            <summary>
            创建IConstructorInvoker接口实例
            </summary>
            <param name="key">ConstructorInfo</param>
            <returns>IConstructorInvoker接口实例</returns>
        </member>
        <member name="T:Smart.Standard.FastReflection.Cache.FastReflectionCache`2">
            <summary>
            FastReflectionCache 缓存基类
            </summary>
            <typeparam name="TKey">MethodInfo、ConstructorInfo、PropertyInfo、 FieldInfo</typeparam>
            <typeparam name="TValue">Invoker 或 Accessor对象</typeparam>
        </member>
        <member name="M:Smart.Standard.FastReflection.Cache.FastReflectionCache`2.Get(`0)">
            <summary>
            获取缓存的Invoker 或 Accessor对象
            </summary>
            <param name="key">MethodInfo、ConstructorInfo、PropertyInfo、 FieldInfo</param>
            <returns>Invoker 或 Accessor对象</returns>
        </member>
        <member name="M:Smart.Standard.FastReflection.Cache.FastReflectionCache`2.Create(`0)">
            <summary>
            执行真正的 Invoker 或 Accessor对象创建
            需在子类中实现具体创建逻辑
            </summary>
            <param name="key">MethodInfo、ConstructorInfo、PropertyInfo、 FieldInfo</param>
            <returns> Invoker 或 Accessor对象</returns>
        </member>
        <member name="T:Smart.Standard.FastReflection.Cache.FastReflectionCaches">
            <summary>
            快速反射 缓存集合
            </summary>
        </member>
        <member name="P:Smart.Standard.FastReflection.Cache.FastReflectionCaches.MethodInvokerCache">
            <summary>
            MethodInvoker缓存
            </summary>
        </member>
        <member name="P:Smart.Standard.FastReflection.Cache.FastReflectionCaches.PropertyAccessorCache">
            <summary>
            PropertyAccessor缓存
            </summary>
        </member>
        <member name="P:Smart.Standard.FastReflection.Cache.FastReflectionCaches.FieldAccessorCache">
            <summary>
            FieldAccessor缓存
            </summary>
        </member>
        <member name="P:Smart.Standard.FastReflection.Cache.FastReflectionCaches.ConstructorInvokerCache">
            <summary>
            ConstructorInvoker缓存
            </summary>
        </member>
        <member name="T:Smart.Standard.FastReflection.Cache.FieldAccessorCache">
            <summary>
            字段存取器缓存
            </summary>
        </member>
        <member name="M:Smart.Standard.FastReflection.Cache.FieldAccessorCache.Create(System.Reflection.FieldInfo)">
            <summary>
            创建IFieldAccessor接口实例
            </summary>
            <param name="key">FieldInfo</param>
            <returns>IFieldAccessor接口实例</returns>
        </member>
        <member name="T:Smart.Standard.FastReflection.Cache.IFastReflectionCache`2">
            <summary>
            快速反射缓存 泛型接口
            </summary>
            <typeparam name="TKey">元数据信息</typeparam>
            <typeparam name="TValue">对应存取器</typeparam>
        </member>
        <member name="M:Smart.Standard.FastReflection.Cache.IFastReflectionCache`2.Get(`0)">
            <summary>
            获取缓存的Invoker 或 Accessor对象
            </summary>
            <param name="key">MethodInfo、ConstructorInfo、PropertyInfo、 FieldInfo</param>
            <returns>Invoker 或 Accessor对象</returns>
        </member>
        <member name="T:Smart.Standard.FastReflection.Cache.MethodInvokerCache">
            <summary>
            方法Invoker缓存
            </summary>
        </member>
        <member name="M:Smart.Standard.FastReflection.Cache.MethodInvokerCache.Create(System.Reflection.MethodInfo)">
            <summary>
            创建IMethodInvoker接口实例
            </summary>
            <param name="key">MethodInfo</param>
            <returns>IMethodInvoker接口实例</returns>
        </member>
        <member name="T:Smart.Standard.FastReflection.Cache.PropertyAccessorCache">
            <summary>
            属性存取器缓存
            </summary>
        </member>
        <member name="M:Smart.Standard.FastReflection.Cache.PropertyAccessorCache.Create(System.Reflection.PropertyInfo)">
            <summary>
            创建IPropertyAccessor接口实例
            </summary>
            <param name="key">PropertyInfo</param>
            <returns>IPropertyAccessor接口实例</returns>
        </member>
        <member name="T:Smart.Standard.FastReflection.Constructor.IConstructorInvoker">
            <summary>
            构造函数Invoker接口
            </summary>
        </member>
        <member name="M:Smart.Standard.FastReflection.Constructor.IConstructorInvoker.Invoke(System.Object[])">
            <summary>
            Invoke方法
            </summary>
            <param name="parameters">方法参数列表</param>
            <returns>方法执行结果</returns>
        </member>
        <member name="T:Smart.Standard.FastReflection.Constructor.ConstructorInvoker">
            <summary>
            构造函数Invoker
            </summary>
        </member>
        <member name="P:Smart.Standard.FastReflection.Constructor.ConstructorInvoker.ConstructorInfo">
            <summary>
            构造函数信息
            </summary>
        </member>
        <member name="M:Smart.Standard.FastReflection.Constructor.ConstructorInvoker.#ctor(System.Reflection.ConstructorInfo)">
            <summary>
            构造函数Invoker
            </summary>
            <param name="constructorInfo">构造函数信息</param>
        </member>
        <member name="M:Smart.Standard.FastReflection.Constructor.ConstructorInvoker.InitializeInvoker(System.Reflection.ConstructorInfo)">
            <summary>
            动态委托创建
            <remarks>
            <![CDATA[
            签名：(object)new T((T0)parameters[0], (T1)parameters[1], ...)
            ]]>
            </remarks>
            </summary>
            <param name="constructorInfo">构造函数信息</param>
            <returns>委托实例</returns>
        </member>
        <member name="M:Smart.Standard.FastReflection.Constructor.ConstructorInvoker.Invoke(System.Object[])">
            <summary>
            通过构造函数信息 反射创建对象
            </summary>
            <param name="parameters">参数列表</param>
            <returns>对象实例</returns>
        </member>
        <member name="M:Smart.Standard.FastReflection.Constructor.ConstructorInvoker.Smart#Standard#FastReflection#Constructor#IConstructorInvoker#Invoke(System.Object[])">
            <summary>
            通过构造函数信息 反射创建对象
            </summary>
            <param name="parameters">参数列表</param>
            <returns>对象实例</returns>
        </member>
        <member name="T:Smart.Standard.FastReflection.Constructor.ConstructorInvokerFactory">
            <summary>
            构造函数Invoker工厂
            </summary>
        </member>
        <member name="M:Smart.Standard.FastReflection.Constructor.ConstructorInvokerFactory.Create(System.Reflection.ConstructorInfo)">
            <summary>
            创建IConstructorInvoker实例
            </summary>
            <param name="key">构造函数信息</param>
            <returns>IConstructorInvoker实例</returns>
        </member>
        <member name="M:Smart.Standard.FastReflection.Constructor.ConstructorInvokerFactory.Smart#Standard#FastReflection#Factory#IFastReflectionFactory{System#Reflection#ConstructorInfo,Smart#Standard#FastReflection#Constructor#IConstructorInvoker}#Create(System.Reflection.ConstructorInfo)">
            <summary>
            创建IConstructorInvoker实例
            </summary>
            <param name="key">构造函数信息</param>
            <returns>IConstructorInvoker实例</returns>
        </member>
        <member name="T:Smart.Standard.FastReflection.Factory.FastReflectionFactories">
            <summary>
            快速反射工厂 集合
            </summary>
        </member>
        <member name="P:Smart.Standard.FastReflection.Factory.FastReflectionFactories.MethodInvokerFactory">
            <summary>
            MethodInvoker工厂接口实例
            </summary>
        </member>
        <member name="P:Smart.Standard.FastReflection.Factory.FastReflectionFactories.ConstructorInvokerFactory">
            <summary>
            ConstructorInvoker工厂接口实例
            </summary>
        </member>
        <member name="P:Smart.Standard.FastReflection.Factory.FastReflectionFactories.PropertyAccessorFactory">
            <summary>
            PropertyAccessor工厂接口实例
            </summary>
        </member>
        <member name="P:Smart.Standard.FastReflection.Factory.FastReflectionFactories.FieldAccessorFactory">
            <summary>
            FieldAccessor工厂接口实例
            </summary>
        </member>
        <member name="T:Smart.Standard.FastReflection.Factory.IFastReflectionFactory`2">
            <summary>
            快速反射工厂 泛型接口
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:Smart.Standard.FastReflection.Factory.IFastReflectionFactory`2.Create(`0)">
            <summary>
            创建对应的 Invoker 或 Accessor对象
            </summary>
            <param name="key">MethodInfo、ConstructorInfo、PropertyInfo、 FieldInfo</param>
            <returns>Invoker 或 Accessor对象</returns>
        </member>
        <member name="T:Smart.Standard.FastReflection.FastReflectionExtensions">
            <summary>
            快速反射扩展方法
            </summary>
        </member>
        <member name="M:Smart.Standard.FastReflection.FastReflectionExtensions.FastInvoke``1(System.Reflection.MethodInfo,System.Object,System.Object[])">
            <summary>
            方法Invoke执行
            </summary>
            <param name="methodInfo">反射方法信息</param>
            <param name="instance">对象实例</param>
            <param name="parameters">参数列表</param>
            <returns>方法执行结果</returns>
        </member>
        <member name="M:Smart.Standard.FastReflection.FastReflectionExtensions.FastInvoke(System.Reflection.MethodInfo,System.Object,System.Object[])">
            <summary>
            方法Invoke执行
            </summary>
            <param name="methodInfo">反射方法信息</param>
            <param name="instance">对象实例</param>
            <param name="parameters">参数列表</param>
            <returns>方法执行结果</returns>
        </member>
        <member name="M:Smart.Standard.FastReflection.FastReflectionExtensions.FastInvoke``1(System.Reflection.ConstructorInfo,System.Object[])">
            <summary>
            构造函数反射调用
            </summary>
            <param name="constructorInfo">反射构造函数信息</param>
            <param name="parameters">参数列表</param>
            <returns>对象实例</returns>
        </member>
        <member name="M:Smart.Standard.FastReflection.FastReflectionExtensions.FastInvoke(System.Reflection.ConstructorInfo,System.Object[])">
            <summary>
            构造函数反射调用
            </summary>
            <param name="constructorInfo">反射构造函数信息</param>
            <param name="parameters">参数列表</param>
            <returns>对象实例</returns>
        </member>
        <member name="M:Smart.Standard.FastReflection.FastReflectionExtensions.FastGetValue``1(System.Reflection.PropertyInfo,System.Object)">
            <summary>
            通过反射获取属性值
            </summary>
            <param name="propertyInfo">反射属性信息</param>
            <param name="instance">对象实例</param>
            <returns>属性值</returns>
        </member>
        <member name="M:Smart.Standard.FastReflection.FastReflectionExtensions.FastGetValue(System.Reflection.PropertyInfo,System.Object)">
            <summary>
            通过反射获取属性值
            </summary>
            <param name="propertyInfo">反射属性信息</param>
            <param name="instance">对象实例</param>
            <returns>属性值</returns>
        </member>
        <member name="M:Smart.Standard.FastReflection.FastReflectionExtensions.FastSetValue(System.Reflection.PropertyInfo,System.Object,System.Object)">
            <summary>
            通过反射设置值
            </summary>
            <param name="propertyInfo">反射属性信息</param>
            <param name="instance">对象实例</param>
            <param name="value">属性值</param>
        </member>
        <member name="M:Smart.Standard.FastReflection.FastReflectionExtensions.FastGetValue``1(System.Reflection.FieldInfo,System.Object)">
            <summary>
            通过反射获取字段值
            </summary>
            <param name="fieldInfo">反射字段信息</param>
            <param name="instance">对象实例</param>
            <returns>字段值</returns>
        </member>
        <member name="M:Smart.Standard.FastReflection.FastReflectionExtensions.FastGetValue(System.Reflection.FieldInfo,System.Object)">
            <summary>
            通过反射获取字段值
            </summary>
            <param name="fieldInfo">反射字段信息</param>
            <param name="instance">对象实例</param>
            <returns>字段值</returns>
        </member>
        <member name="M:Smart.Standard.FastReflection.FastReflectionExtensions.FastSetValue(System.Reflection.FieldInfo,System.Object,System.Object)">
            <summary>
            通过反射设置字段值
            </summary>
            <param name="fieldInfo">反射字段信息</param>
            <param name="instance">对象实例</param>
            <param name="value">要设置的值</param>
            <returns>字段值</returns>
        </member>
        <member name="M:Smart.Standard.FastReflection.FastReflectionExtensions.GetPropertiesCache(System.Type)">
            <summary>
            获取一个类的所有字段集合
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:Smart.Standard.FastReflection.Field.IFieldAccessor">
            <summary>
            字段访问器接口
            </summary>
        </member>
        <member name="M:Smart.Standard.FastReflection.Field.IFieldAccessor.GetValue(System.Object)">
            <summary>
            获取字段值
            </summary>
            <param name="instance">对象实例</param>
            <returns>对应字段的值</returns>
        </member>
        <member name="M:Smart.Standard.FastReflection.Field.IFieldAccessor.SetValue(System.Object,System.Object)">
            <summary>
            设置字段值
            </summary>
            <param name="instance">对象实例</param>
            <param name="value">要给对应字段赋予的值</param>
        </member>
        <member name="T:Smart.Standard.FastReflection.Field.FieldAccessor">
            <summary>
            字段访问器
            </summary>
        </member>
        <member name="P:Smart.Standard.FastReflection.Field.FieldAccessor.FieldInfo">
            <summary>
            字段信息
            </summary>
        </member>
        <member name="M:Smart.Standard.FastReflection.Field.FieldAccessor.#ctor(System.Reflection.FieldInfo)">
            <summary>
            字段访问器
            </summary>
            <param name="fieldInfo">字段信息</param>
        </member>
        <member name="M:Smart.Standard.FastReflection.Field.FieldAccessor.GetDelegate(System.Reflection.FieldInfo)">
            <summary>
            动态委托创建
            <remarks>
            <![CDATA[
            签名：(object)(((TInstance)instance).Field)
            ]]>
            </remarks>
            </summary>
            <param name="fieldInfo">字段信息</param>
            <returns>获取字段值 委托方法</returns>
        </member>
        <member name="M:Smart.Standard.FastReflection.Field.FieldAccessor.GetValue(System.Object)">
            <summary>
            IFieldAccessor接口实现
            </summary>
            <param name="instance">对象实例</param>
            <returns>属性值</returns>
        </member>
        <member name="M:Smart.Standard.FastReflection.Field.FieldAccessor.SetValue(System.Object,System.Object)">
            <summary>
            IFieldAccessor接口实现
            </summary>
            <param name="instance">对象实例</param>
            <param name="value">字段值</param>
        </member>
        <member name="M:Smart.Standard.FastReflection.Field.FieldAccessor.Smart#Standard#FastReflection#Field#IFieldAccessor#GetValue(System.Object)">
            <summary>
            IFieldAccessor接口实现
            </summary>
            <param name="instance">对象实例</param>
            <returns>属性值</returns>
        </member>
        <member name="M:Smart.Standard.FastReflection.Field.FieldAccessor.Smart#Standard#FastReflection#Field#IFieldAccessor#SetValue(System.Object,System.Object)">
            <summary>
            IFieldAccessor接口显式实现
            </summary>
            <param name="instance">对象实例</param>
            <param name="value">字段值</param>
        </member>
        <member name="T:Smart.Standard.FastReflection.Field.FieldAccessorFactory">
            <summary>
            字段存取器工厂
            </summary>
        </member>
        <member name="M:Smart.Standard.FastReflection.Field.FieldAccessorFactory.Create(System.Reflection.FieldInfo)">
            <summary>
            创建字段访问器 接口实现
            </summary>
            <param name="key">字段信息</param>
            <returns>字段访问器实例</returns>
        </member>
        <member name="M:Smart.Standard.FastReflection.Field.FieldAccessorFactory.Smart#Standard#FastReflection#Factory#IFastReflectionFactory{System#Reflection#FieldInfo,Smart#Standard#FastReflection#Field#IFieldAccessor}#Create(System.Reflection.FieldInfo)">
            <summary>
            创建字段访问器 接口显示实现
            </summary>
            <param name="key">字段信息</param>
            <returns>字段访问器实例</returns>
        </member>
        <member name="T:Smart.Standard.FastReflection.Method.IMethodInvoker">
            <summary>
            方法Invoker接口
            </summary>
        </member>
        <member name="M:Smart.Standard.FastReflection.Method.IMethodInvoker.Invoke(System.Object,System.Object[])">
            <summary>
            通过反射执行方法
            </summary>
            <param name="instance">对象实例</param>
            <param name="parameters">方法参数</param>
            <returns>执行结果</returns>
        </member>
        <member name="T:Smart.Standard.FastReflection.Method.MethodInvoker">
            <summary>
            方法Invoker
            </summary>
        </member>
        <member name="P:Smart.Standard.FastReflection.Method.MethodInvoker.MethodInfo">
            <summary>
            方法信息
            </summary>
        </member>
        <member name="M:Smart.Standard.FastReflection.Method.MethodInvoker.#ctor(System.Reflection.MethodInfo)">
            <summary>
            方法Invoker
            </summary>
            <param name="methodInfo">方法信息</param>
        </member>
        <member name="M:Smart.Standard.FastReflection.Method.MethodInvoker.CreateInvokeDelegate(System.Reflection.MethodInfo)">
            <summary>
            动态委托创建
            <remarks>
            <![CDATA[
            签名：((TInstance)instance).Method((T0)parameters[0], (T1)parameters[1], ...)
            ]]>
            </remarks>
            </summary>
            <param name="methodInfo">方法信息</param>
            <returns>方法调用 动态委托实例</returns>
        </member>
        <member name="M:Smart.Standard.FastReflection.Method.MethodInvoker.Invoke(System.Object,System.Object[])">
            <summary>
            反射执行方法调用
            </summary>
            <param name="instance">对象实例</param>
            <param name="parameters">参数列表</param>
            <returns>执行结果</returns>
        </member>
        <member name="M:Smart.Standard.FastReflection.Method.MethodInvoker.Smart#Standard#FastReflection#Method#IMethodInvoker#Invoke(System.Object,System.Object[])">
            <summary>
            反射执行方法调用
            </summary>
            <param name="instance">对象实例</param>
            <param name="parameters">参数列表</param>
            <returns>执行结果</returns>
        </member>
        <member name="T:Smart.Standard.FastReflection.Method.MethodInvokerFactory">
            <summary>
            方法Invoker工厂
            </summary>
        </member>
        <member name="M:Smart.Standard.FastReflection.Method.MethodInvokerFactory.Create(System.Reflection.MethodInfo)">
            <summary>
            创建IMethodInvoker接口实例
            </summary>
            <param name="key">方法信息</param>
            <returns>IMethodInvoker接口实例</returns>
        </member>
        <member name="M:Smart.Standard.FastReflection.Method.MethodInvokerFactory.Smart#Standard#FastReflection#Factory#IFastReflectionFactory{System#Reflection#MethodInfo,Smart#Standard#FastReflection#Method#IMethodInvoker}#Create(System.Reflection.MethodInfo)">
            <summary>
            创建IMethodInvoker接口实例
            </summary>
            <param name="key">方法信息</param>
            <returns>IMethodInvoker接口实例</returns>
        </member>
        <member name="T:Smart.Standard.FastReflection.Property.IPropertyAccessor">
            <summary>
            属性存取器接口
            </summary>
        </member>
        <member name="M:Smart.Standard.FastReflection.Property.IPropertyAccessor.GetValue(System.Object)">
            <summary>
            获取属性值
            </summary>
            <param name="instance">对象实例</param>
            <returns>对应属性的值</returns>
        </member>
        <member name="M:Smart.Standard.FastReflection.Property.IPropertyAccessor.SetValue(System.Object,System.Object)">
            <summary>
            设置属性值
            </summary>
            <param name="instance">对象实例</param>
            <param name="value">要给对应属性赋予的值</param>
        </member>
        <member name="T:Smart.Standard.FastReflection.Property.PropertyAccessor">
            <summary>
            属性存取器
            </summary>
        </member>
        <member name="P:Smart.Standard.FastReflection.Property.PropertyAccessor.PropertyInfo">
            <summary>
            反射属性信息
            </summary>
        </member>
        <member name="M:Smart.Standard.FastReflection.Property.PropertyAccessor.#ctor(System.Reflection.PropertyInfo)">
            <summary>
            属性存取器
            </summary>
            <param name="propertyInfo">属性信息</param>
        </member>
        <member name="M:Smart.Standard.FastReflection.Property.PropertyAccessor.InitializeGet(System.Reflection.PropertyInfo)">
            <summary>
            构件Get委托方法
            <remarks>
            <![CDATA[
            签名：(object)(((TInstance)instance).Property)
            ]]>
            </remarks>
            </summary>
            <param name="propertyInfo">属性信息</param>
        </member>
        <member name="M:Smart.Standard.FastReflection.Property.PropertyAccessor.InitializeSet(System.Reflection.PropertyInfo)">
            <summary>
            构件Set委托方法
            </summary>
            <param name="propertyInfo">属性信息</param>
        </member>
        <member name="M:Smart.Standard.FastReflection.Property.PropertyAccessor.GetValue(System.Object)">
            <summary>
            获取属性值
            </summary>
            <param name="o">对象实例</param>
            <returns>属性值</returns>
        </member>
        <member name="M:Smart.Standard.FastReflection.Property.PropertyAccessor.SetValue(System.Object,System.Object)">
            <summary>
            设置属性值
            </summary>
            <param name="o">对象实例</param>
            <param name="value">属性值</param>
        </member>
        <member name="M:Smart.Standard.FastReflection.Property.PropertyAccessor.Smart#Standard#FastReflection#Property#IPropertyAccessor#GetValue(System.Object)">
            <summary>
            获取属性值
            </summary>
            <param name="instance"></param>
            <returns>属性值</returns>
        </member>
        <member name="M:Smart.Standard.FastReflection.Property.PropertyAccessor.Smart#Standard#FastReflection#Property#IPropertyAccessor#SetValue(System.Object,System.Object)">
            <summary>
            设置属性值
            </summary>
            <param name="instance">对象实例</param>
            <param name="value">属性值</param>
        </member>
        <member name="T:Smart.Standard.FastReflection.Property.PropertyAccessorFactory">
            <summary>
            属性存取器工厂
            </summary>
        </member>
        <member name="M:Smart.Standard.FastReflection.Property.PropertyAccessorFactory.Create(System.Reflection.PropertyInfo)">
            <summary>
            创建IPropertyAccessor实例
            </summary>
            <param name="key">属性信息</param>
            <returns>IPropertyAccessor实例</returns>
        </member>
        <member name="M:Smart.Standard.FastReflection.Property.PropertyAccessorFactory.Smart#Standard#FastReflection#Factory#IFastReflectionFactory{System#Reflection#PropertyInfo,Smart#Standard#FastReflection#Property#IPropertyAccessor}#Create(System.Reflection.PropertyInfo)">
            <summary>
            创建IPropertyAccessor实例
            </summary>
            <param name="key">属性信息</param>
            <returns>IPropertyAccessor实例</returns>
        </member>
        <member name="T:Smart.Standard.Helper.AppSettingHelper">
            <summary>
            Config文件操作
            </summary>
        </member>
        <member name="M:Smart.Standard.Helper.AppSettingHelper.GetValue(System.String)">
            <summary>
            根据Key取Value值
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Smart.Standard.Helper.AppSettingHelper.GetValue``1(System.String)">
            <summary>
            根据Key取Value值
            </summary>
            <typeparam name="T">值类型</typeparam>
            <param name="key">AppSetting键</param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Helper.AppSettingHelper.SetValue(System.String,System.String,System.String)">
            <summary>
            根据Key修改Value
            </summary>
            <param name="key">要修改的Key</param>
            <param name="value">要修改为的值</param>
            <param name="xmlFileRelativePath">xml文件相对位置
            <para>例如：<![CDATA[Xml\\appSettings.config]]></para>
            </param>
        </member>
        <member name="T:Smart.Standard.Helper.ArgumentGuard">
            <summary>
            参数检查
            </summary>
        </member>
        <member name="M:Smart.Standard.Helper.ArgumentGuard.ArgumentNotNull(System.String,System.Object)">
            <summary>
            参数非空
            </summary>
        </member>
        <member name="M:Smart.Standard.Helper.ArgumentGuard.ArgumentNotNullOrEmpty(System.String,System.Object)">
            <summary>
            参数非空
            </summary>
        </member>
        <member name="M:Smart.Standard.Helper.ArgumentGuard.ArgumentGreaterThanZero(System.String,System.Int32)">
            <summary>
            参数大于0
            </summary>
        </member>
        <member name="M:Smart.Standard.Helper.ArgumentGuard.TypeIsAssignable(System.Type,System.Type,System.String,System.String)">
            <summary>
            检查参数类型从指定的类型继承或实现
            </summary>
        </member>
        <member name="M:Smart.Standard.Helper.ArgumentGuard.InstanceIsAssignable(System.Type,System.Object,System.String,System.String)">
            <summary>
            检查参数实例从指定的类型继承或实现
            </summary>
        </member>
        <member name="M:Smart.Standard.Helper.ArgumentGuard.ThrowArgumentError(System.String)">
            <summary>
            抛出参数错误
            </summary>
            <param name="argumentName">参数名</param>
        </member>
        <member name="M:Smart.Standard.Helper.ArgumentGuard.GetStackTraceInfo">
            <summary>
            获取堆栈跟踪信息
            </summary>
        </member>
        <member name="T:Smart.Standard.Helper.CacheHelper`1">
            <summary>
            缓存信息配置
            </summary>
        </member>
        <member name="F:Smart.Standard.Helper.CacheHelper`1.Dictionary">
            <summary>
            集合
            </summary>
        </member>
        <member name="M:Smart.Standard.Helper.CacheHelper`1.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Smart.Standard.Helper.CacheHelper`1.GetList">
            <summary>
            初始化
            </summary>
            <returns></returns>
        </member>
        <member name="T:Smart.Standard.Helper.CryptoHelper">
            <summary>
            加密辅助类
            </summary>
        </member>
        <member name="M:Smart.Standard.Helper.CryptoHelper.CreateHashPwdBySalte(System.String,System.String@)">
            <summary>
            为明文密码进行SHA256Hash
            </summary>
            <param name="plainPwd">明文的密码</param>
            <param name="salte">随机盐【需要存储】</param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Helper.CryptoHelper.MergeBytesArrays(System.Byte[][])">
            <summary>
            合并Byte数组
            </summary>
            <param name="arrays"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Helper.CryptoHelper.EqualPwdSha256(System.String,System.String,System.String)">
            <summary>
            对明文密码进行SHA256Hash后与密文密码进行比较
            </summary>
            <param name="plainPwd">明文密码</param>
            <param name="salte">随机盐</param>
            <param name="cipherPwd">密文密码</param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Helper.CryptoHelper.CreateToken``1(``0,System.String)">
            <summary>
            生成Token
            </summary>
            <param name="authInfo">用户凭据</param> 
            <param name="appSecret">App密钥</param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Helper.CryptoHelper.DecToken(System.String,System.String)">
            <summary>
            token解密,TokenExpiredException异常已经过期,SignatureVerificationException签名暂时不可用或错误
            </summary>
            <param name="token">待解密的Token</param>
            <param name="appSecret">解密秘钥</param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Helper.CryptoHelper.TokenClaim(System.String,System.Collections.Generic.Dictionary{Smart.Standard.Enum.ClaimKinds,System.Object})">
            <summary>
            Token声明创建
            </summary>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Helper.CryptoHelper.GetTokenClaim``1(System.String,System.String,Smart.Standard.Enum.ClaimKinds)">
            <summary>
            Token声明获取对象,TokenExpiredException异常已经过期,SignatureVerificationException签名暂时不可用或错误
            </summary>
            <typeparam name="T"></typeparam>
            <param name="token"></param>
            <param name="appSecret"></param>
            <param name="claim"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Helper.CryptoHelper.AppSecret">
            <summary>
            AppSecret
            </summary>
            <returns></returns>
        </member>
        <member name="T:Smart.Standard.Helper.DateTimeHelper">
            <summary>
            日期时间辅助类
            </summary>
        </member>
        <member name="M:Smart.Standard.Helper.DateTimeHelper.GetUnixTimestamp(System.DateTime)">
            <summary>
            获得Unix时间戳（毫秒）
            </summary>
            <returns>毫秒</returns>
        </member>
        <member name="M:Smart.Standard.Helper.DateTimeHelper.GetNowUnixTimestamp">
            <summary>
            获得当前Unix时间戳（毫秒）
            </summary>
            <returns>毫秒</returns>
        </member>
        <member name="M:Smart.Standard.Helper.DateTimeHelper.GetNowUnixTimeSeconds">
            <summary>
            获得当前Unix时间戳（秒）
            </summary>
            <returns>秒</returns>
        </member>
        <member name="M:Smart.Standard.Helper.DateTimeHelper.GetNowUnixTimeSeconds(System.DateTime)">
            <summary>
            获得当前Unix时间戳（秒）
            </summary>
            <returns>秒</returns>
        </member>
        <member name="M:Smart.Standard.Helper.DateTimeHelper.UnixStampToDateTime(System.Int64)">
            <summary>
            时间戳转换为日期（毫秒级)
            </summary>
            <param name="timeStamp"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Helper.DateTimeHelper.UnixSecondsToDateTime(System.Int64)">
            <summary>
            时间戳转换为日期（秒级）
            </summary>
            <param name="timeStamp"></param>
            <returns></returns>
        </member>
        <member name="T:Smart.Standard.Helper.HashAlgorithmHelper">
            <summary>
            HashAlgorithm帮助类
            </summary>
        </member>
        <member name="M:Smart.Standard.Helper.HashAlgorithmHelper.HashData(System.IO.Stream,Smart.Standard.Enum.HashAlgorithmKinds)">
            <summary>
            计算哈希值
            </summary>
            <param name="stream">要计算哈希值的 Stream</param>
            <param name="hashKind">Hash算法类型</param>
            <returns>哈希值字节数组</returns>
            <exception cref="T:System.NotImplementedException">未实现“Hash算法类型”对应哈希算法</exception>
        </member>
        <member name="M:Smart.Standard.Helper.HashAlgorithmHelper.ByteArrayToHexString(System.Byte[])">
            <summary> 
            字节数组转换为16进制表示的字符串
            </summary>
        </member>
        <member name="T:Smart.Standard.Helper.HttpRequestHelper">
            <summary>
            Http请求类
            </summary>
        </member>
        <member name="M:Smart.Standard.Helper.HttpRequestHelper.HttpRequest(System.String,System.String,System.Boolean@,System.Boolean,System.Boolean,System.String,System.Int32,System.String,System.String)">
            <summary>
            Http请求提交(提交数据使用UTF-8传送)
            </summary>
            <param name="url"></param>
            <param name="value"></param>
            <param name="isCatch">是否捕获到异常；true:捕获到异常</param>
            <param name="saveCookie">是否用一个容器来保存cookies默认不保存</param>
            <param name="requestType"></param>
            <param name="encodingName"></param>
            <param name="timeout">超时时间，以毫秒为单位</param>
            <param name="contentType"></param>
            <param name="referer"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Helper.HttpRequestHelper.ConvertEntityToKvString``1(``0,System.String,System.String)">
            <summary>
            将实体转换成Post格式字符串
            </summary>
            <typeparam name="T"></typeparam>
            <param name="kbm"></param>
            <param name="keyNameJoinStr">属性名与属性值连接字符串</param>
            <param name="splitStr">每组值的分割符</param>
            <returns></returns>
        </member>
        <member name="T:Smart.Standard.Helper.LunarDateTimeHelper">
            <summary>
            农历日期辅助类
            </summary>
        </member>
        <member name="F:Smart.Standard.Helper.LunarDateTimeHelper.ChineseCalendar">
            <summary>
             实例化一个 ChineseLunisolarCalendar
            </summary>
        </member>
        <member name="F:Smart.Standard.Helper.LunarDateTimeHelper.Tg">
            <summary>
             十天干
            </summary>
        </member>
        <member name="F:Smart.Standard.Helper.LunarDateTimeHelper.Dz">
            <summary>
             十二地支
            </summary>
        </member>
        <member name="F:Smart.Standard.Helper.LunarDateTimeHelper.Sx">
            <summary>
             十二生肖
            </summary>
        </member>
        <member name="M:Smart.Standard.Helper.LunarDateTimeHelper.GetLunisolarYear(System.Int32)">
            <summary>
             返回农历天干地支年
            </summary>
            <param name="year">农历年</param>
        </member>
        <member name="F:Smart.Standard.Helper.LunarDateTimeHelper.Months">
            <summary>
             农历月
            </summary>
        </member>
        <member name="F:Smart.Standard.Helper.LunarDateTimeHelper.Days1">
            <summary>
             农历日
            </summary>
        </member>
        <member name="F:Smart.Standard.Helper.LunarDateTimeHelper.Days">
            <summary>
             农历日
            </summary>
        </member>
        <member name="M:Smart.Standard.Helper.LunarDateTimeHelper.GetLunisolarMonth(System.Int32)">
            <summary>
             返回农历月
            </summary>
            <param name="month">月份</param>
        </member>
        <member name="M:Smart.Standard.Helper.LunarDateTimeHelper.GetLunisolarDay(System.Int32)">
            <summary>
             返回农历日
            </summary>
            <param name="day">天</param>
        </member>
        <member name="M:Smart.Standard.Helper.LunarDateTimeHelper.GetChineseDateTime(System.DateTime)">
            <summary>
             根据公历获取农历日期
            </summary>
            <param name="datetime">公历日期</param>
        </member>
        <member name="T:Smart.Standard.Helper.PinYinHelper">
            <summary>
            拼音助手
            </summary>
        </member>
        <member name="M:Smart.Standard.Helper.PinYinHelper.GetPinYinCount(System.Char)">
            <summary>
            返回单个简体中文字的拼音个数
            </summary>
            <param name="inputChar">简体中文单字</param>      
        </member>
        <member name="M:Smart.Standard.Helper.PinYinHelper.GetPinYinWithTone(System.Char)">
            <summary>
            返回单个简体中文字的拼音列表
            </summary>
            <param name="inputChar">简体中文单字</param>      
        </member>
        <member name="M:Smart.Standard.Helper.PinYinHelper.GetPinYin(System.String,Smart.Standard.Enum.PinYinKinds,System.String)">
            <summary>
            获取拼音
            </summary>
            <param name="source">要获取拼音的文字</param>
            <param name="mode">获取模式</param>
            <param name="spliter">字之间的分隔符</param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Helper.PinYinHelper.GetPinYinCombination(System.String,System.String,System.String)">
            <summary>
            获取词组所有可能的拼音组合
            </summary>
            <param name="source">要获取拼音的文字</param>
            <param name="singleWordSpliter">单个字之间的分隔符</param>
            <param name="wordTermSpliter">词字之间的分隔符</param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Helper.PinYinHelper.Combinate(System.Collections.Generic.List{System.Collections.Generic.List{System.String}},System.String)">
            <summary>
            组合所有List元素
            </summary>
            <param name="input"></param>
            <param name="singleWordSpliter"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Helper.PinYinHelper.GetAcronym(System.String)">
            <summary>
            获取首字母缩写词
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="T:Smart.Standard.Helper.RedisHelper">
            <summary>
            RedisHelper类
            </summary>
        </member>
        <member name="F:Smart.Standard.Helper.RedisHelper._connectionString">
            <summary>
            连接字符串
            </summary>
        </member>
        <member name="F:Smart.Standard.Helper.RedisHelper._connMultiplexer">
            <summary>
            redis 连接对象
            </summary>
        </member>
        <member name="F:Smart.Standard.Helper.RedisHelper._defaultKey">
            <summary>
            默认的全局 Key 前缀（用来当作 RedisKey 的前缀）
            </summary>
        </member>
        <member name="F:Smart.Standard.Helper.RedisHelper.Locker">
            <summary>
            锁
            </summary>
        </member>
        <member name="P:Smart.Standard.Helper.RedisHelper.PrefixKey">
            <summary>
            当对象Key前缀
            </summary>
        </member>
        <member name="F:Smart.Standard.Helper.RedisHelper._db">
            <summary>
            redis数据库
            </summary>
        </member>
        <member name="M:Smart.Standard.Helper.RedisHelper.GetConnectionRedisMultiplexer">
            <summary>
            获取 Redis 连接对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Helper.RedisHelper.GetTransaction">
            <summary>
            构造函数
            </summary>
            <returns></returns>
        </member>
        <member name="T:Smart.Standard.Helper.RedisHelper.EventHandler`1">
            <summary>
            事件委托
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="E:Smart.Standard.Helper.RedisHelper.ConnectionRestored">
            <summary>
            建立物理连接时
            </summary>
        </member>
        <member name="E:Smart.Standard.Helper.RedisHelper.ConnectionFailed">
            <summary>
            物理连接失败时
            </summary>
        </member>
        <member name="E:Smart.Standard.Helper.RedisHelper.ErrorMessage">
            <summary>
            发生错误时
            </summary>
        </member>
        <member name="E:Smart.Standard.Helper.RedisHelper.ConfigurationChanged">
            <summary>
            配置更改时
            </summary>
        </member>
        <member name="E:Smart.Standard.Helper.RedisHelper.HashSlotMoved">
            <summary>
            集群更改时
            </summary>
        </member>
        <member name="E:Smart.Standard.Helper.RedisHelper.InternalError">
            <summary>
            内部服务器发生错误时
            </summary>
        </member>
        <member name="E:Smart.Standard.Helper.RedisHelper.ConfigurationChangedBroadcast">
            <summary>
            重新配置广播时
            </summary>
        </member>
        <member name="M:Smart.Standard.Helper.RedisHelper.#ctor(System.String,System.String,System.String,System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="connectionString"></param>
            <param name="defaultKey"></param>
            <param name="prefixKey"></param>
            <param name="db"></param>
        </member>
        <member name="M:Smart.Standard.Helper.RedisHelper.StringSet(System.String,System.String,System.Nullable{System.TimeSpan})">
            <summary>
            设置 key 并保存字符串（如果 key 已存在，则覆盖值）
            </summary>
            <param name="redisKey"></param>
            <param name="redisValue"></param>
            <param name="expiry"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Helper.RedisHelper.StringSet(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{StackExchange.Redis.RedisKey,StackExchange.Redis.RedisValue}})">
            <summary>
            保存多个 Key-value
            </summary>
            <param name="keyValuePairs"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Helper.RedisHelper.StringGet(System.String,System.Nullable{System.TimeSpan})">
            <summary>
            获取字符串
            </summary>
            <param name="redisKey"></param>
            <param name="expiry"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Helper.RedisHelper.StringSet``1(System.String,``0,System.Nullable{System.TimeSpan})">
            <summary>
            存储一个对象（该对象会被序列化保存）
            </summary>
            <param name="redisKey"></param>
            <param name="redisValue"></param>
            <param name="expiry"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Helper.RedisHelper.StringGet``1(System.String,System.Nullable{System.TimeSpan})">
            <summary>
            获取一个对象（会进行反序列化）
            </summary>
            <param name="redisKey"></param>
            <param name="expiry"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Helper.RedisHelper.StringSetAsync(System.String,System.String,System.Nullable{System.TimeSpan})">
            <summary>
            保存一个字符串值
            </summary>
            <param name="redisKey"></param>
            <param name="redisValue"></param>
            <param name="expiry"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Helper.RedisHelper.StringSetAsync(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{StackExchange.Redis.RedisKey,StackExchange.Redis.RedisValue}})">
            <summary>
            保存一组字符串值
            </summary>
            <param name="keyValuePairs"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Helper.RedisHelper.StringGetAsync(System.String,System.Nullable{System.TimeSpan})">
            <summary>
            获取单个值
            </summary>
            <param name="redisKey"></param>   
            <param name="expiry"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Helper.RedisHelper.StringSetAsync``1(System.String,``0,System.Nullable{System.TimeSpan})">
            <summary>
            存储一个对象（该对象会被序列化保存）
            </summary>
            <param name="redisKey"></param>
            <param name="redisValue"></param>
            <param name="expiry"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Helper.RedisHelper.StringGetAsync``1(System.String,System.Nullable{System.TimeSpan})">
            <summary>
            获取一个对象（会进行反序列化）
            </summary>
            <param name="redisKey"></param>
            <param name="expiry"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Helper.RedisHelper.HashExists(System.String,System.String)">
            <summary>
            判断该字段是否存在 hash 中
            </summary>
            <param name="redisKey"></param>
            <param name="hashField"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Helper.RedisHelper.HashDelete(System.String,System.String)">
            <summary>
            从 hash 中移除指定字段
            </summary>
            <param name="redisKey"></param>
            <param name="hashField"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Helper.RedisHelper.HashDelete(System.String,System.Collections.Generic.IEnumerable{StackExchange.Redis.RedisValue})">
            <summary>
            从 hash 中移除指定字段
            </summary>
            <param name="redisKey"></param>
            <param name="hashField"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Helper.RedisHelper.HashSet(System.String,System.String,System.String)">
            <summary>
            在 hash 设定值
            </summary>
            <param name="redisKey"></param>
            <param name="hashField"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Helper.RedisHelper.HashSet(System.String,System.Collections.Generic.IEnumerable{StackExchange.Redis.HashEntry})">
            <summary>
            在 hash 中设定值
            </summary>
            <param name="redisKey"></param>
            <param name="hashFields"></param>
        </member>
        <member name="M:Smart.Standard.Helper.RedisHelper.HashGet(System.String,System.String)">
            <summary>
            在 hash 中获取值
            </summary>
            <param name="redisKey"></param>
            <param name="hashField"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Helper.RedisHelper.HashGet(System.String,StackExchange.Redis.RedisValue[],System.String)">
            <summary>
            在 hash 中获取值
            </summary>
            <param name="redisKey"></param>
            <param name="hashField"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Helper.RedisHelper.HashGet``1(System.String,StackExchange.Redis.RedisValue[],System.String)">
            <summary>
            在hash中获取值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="redisKey"></param>
            <param name="hashField"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Helper.RedisHelper.HashKeys(System.String)">
            <summary>
            从 hash 返回所有的字段值
            </summary>
            <param name="redisKey"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Helper.RedisHelper.HashValues(System.String)">
            <summary>
            返回 hash 中的所有值
            </summary>
            <param name="redisKey"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Helper.RedisHelper.HashValues``1(System.String)">
            <summary>
            从所有字段返回值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="redisKey"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Helper.RedisHelper.HashSet``1(System.String,System.String,``0)">
            <summary>
            在 hash 设定值（序列化）
            </summary>
            <param name="redisKey"></param>
            <param name="hashField"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Helper.RedisHelper.HashGet``1(System.String,System.String)">
            <summary>
            在 hash 中获取值（反序列化）
            </summary>
            <param name="redisKey"></param>
            <param name="hashField"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Helper.RedisHelper.HashGetAll(System.String,StackExchange.Redis.CommandFlags)">
            <summary>
             Redis散列数据类型 获取所有field所有值,以 HashEntry[]形式返回
            </summary>
            <param name="redisKey"></param>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Helper.RedisHelper.HashByKeys(System.String,System.String)">
            <summary>
            支持模糊查询
            </summary>
            <param name="redisKey"></param>
            <param name="keypattern"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Helper.RedisHelper.HashQuery``1(System.String,System.String)">
            <summary>
            模糊查询
            </summary>
            <typeparam name="T"></typeparam>
            <param name="redisKey"></param>
            <param name="keypattern"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Helper.RedisHelper.HashSet``1(System.String,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            添加
            </summary>
            <typeparam name="T"></typeparam>
            <param name="redisKey"></param>
            <param name="hashFields"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Helper.RedisHelper.HashSet``1(System.String,System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String})">
            <summary>
            添加
            </summary>
            <typeparam name="T"></typeparam>
            <param name="redisKey"></param>
            <param name="hashFields"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Helper.RedisHelper.HashExistsAsync(System.String,System.String)">
            <summary>
            判断该字段是否存在 hash 中
            </summary>
            <param name="redisKey"></param>
            <param name="hashField"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Helper.RedisHelper.HashDeleteAsync(System.String,System.String)">
            <summary>
            从 hash 中移除指定字段
            </summary>
            <param name="redisKey"></param>
            <param name="hashField"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Helper.RedisHelper.HashDeleteAsync(System.String,System.Collections.Generic.IEnumerable{StackExchange.Redis.RedisValue})">
            <summary>
            从 hash 中移除指定字段
            </summary>
            <param name="redisKey"></param>
            <param name="hashField"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Helper.RedisHelper.HashSetAsync(System.String,System.String,System.String)">
            <summary>
            在 hash 设定值
            </summary>
            <param name="redisKey"></param>
            <param name="hashField"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Helper.RedisHelper.HashSetAsync``1(System.String,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            批量添加
            </summary>
            <typeparam name="T"></typeparam>
            <param name="redisKey"></param>
            <param name="hashFields"></param>
        </member>
        <member name="M:Smart.Standard.Helper.RedisHelper.HashSetAsync(System.String,System.Collections.Generic.IEnumerable{StackExchange.Redis.HashEntry})">
            <summary>
            在 hash 中设定值
            </summary>
            <param name="redisKey"></param>
            <param name="hashFields"></param>
        </member>
        <member name="M:Smart.Standard.Helper.RedisHelper.HashSetAsync``1(System.String,System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String})">
            <summary>
            添加
            </summary>
            <typeparam name="T"></typeparam>
            <param name="redisKey"></param>
            <param name="hashFields"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Helper.RedisHelper.HashGetAsync(System.String,System.String)">
            <summary>
            在 hash 中获取值
            </summary>
            <param name="redisKey"></param>
            <param name="hashField"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Helper.RedisHelper.HashGetAsync(System.String,StackExchange.Redis.RedisValue[],System.String)">
            <summary>
            在 hash 中获取值
            </summary>
            <param name="redisKey"></param>
            <param name="hashField"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Helper.RedisHelper.HashGetAsync``1(System.String,StackExchange.Redis.RedisValue[],System.String)">
            <summary>
            根据hashField 获取所有符合条件的值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="redisKey"></param>
            <param name="hashField"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Helper.RedisHelper.HashKeysAsync(System.String)">
            <summary>
            从 hash 返回所有的字段值
            </summary>
            <param name="redisKey"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Helper.RedisHelper.HashValuesAsync(System.String)">
            <summary>
            返回 hash 中的所有值
            </summary>
            <param name="redisKey"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Helper.RedisHelper.HashValuesAsync``1(System.String)">
            <summary>
            返回 hash 中的所有值
            </summary>
            <param name="redisKey"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Helper.RedisHelper.HashGetAllValues(System.String,StackExchange.Redis.CommandFlags)">
            <summary>
            Redis散列数据类型 获取key中所有field的值。
            </summary>     
            <param name="redisKey"></param>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Helper.RedisHelper.HashSetAsync``1(System.String,System.String,``0)">
            <summary>
            在 hash 设定值（序列化）
            </summary>
            <param name="redisKey"></param>
            <param name="hashField"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Helper.RedisHelper.HashGetAsync``1(System.String,System.String)">
            <summary>
            在 hash 中获取值（反序列化）
            </summary>
            <param name="redisKey"></param>
            <param name="hashField"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Helper.RedisHelper.HashByKeysAsync(System.String,System.String)">
            <summary>
            支持模糊查询
            </summary>
            <param name="redisKey"></param>
            <param name="keypattern"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Helper.RedisHelper.HashQueryAsync``1(System.String,System.String)">
            <summary>
            模糊查询
            </summary>
            <typeparam name="T"></typeparam>
            <param name="redisKey"></param>
            <param name="keypattern"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Helper.RedisHelper.ListLeftPop(System.String)">
            <summary>
            移除并返回存储在该键列表的第一个元素
            </summary>
            <param name="redisKey"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Helper.RedisHelper.ListRightPop(System.String)">
            <summary>
            移除并返回存储在该键列表的最后一个元素
            </summary>
            <param name="redisKey"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Helper.RedisHelper.ListRemove(System.String,System.String)">
            <summary>
            移除列表指定键上与该值相同的元素
            </summary>
            <param name="redisKey"></param>
            <param name="redisValue"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Helper.RedisHelper.ListRightPush(System.String,System.String)">
            <summary>
            在列表尾部插入值。如果键不存在，先创建再插入值
            </summary>
            <param name="redisKey"></param>
            <param name="redisValue"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Helper.RedisHelper.ListLeftPush(System.String,System.String)">
            <summary>
            在列表头部插入值。如果键不存在，先创建再插入值
            </summary>
            <param name="redisKey"></param>
            <param name="redisValue"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Helper.RedisHelper.ListLength(System.String)">
            <summary>
            返回列表上该键的长度，如果不存在，返回 0
            </summary>
            <param name="redisKey"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Helper.RedisHelper.ListRange(System.String)">
            <summary>
            返回在该列表上键所对应的元素
            </summary>
            <param name="redisKey"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Helper.RedisHelper.ListLeftPop``1(System.String)">
            <summary>
            移除并返回存储在该键列表的第一个元素
            </summary>
            <param name="redisKey"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Helper.RedisHelper.ListRightPop``1(System.String)">
            <summary>
            移除并返回存储在该键列表的最后一个元素
            </summary>
            <param name="redisKey"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Helper.RedisHelper.ListRightPush``1(System.String,``0)">
            <summary>
            在列表尾部插入值。如果键不存在，先创建再插入值
            </summary>
            <param name="redisKey"></param>
            <param name="redisValue"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Helper.RedisHelper.ListLeftPush``1(System.String,``0)">
            <summary>
            在列表头部插入值。如果键不存在，先创建再插入值
            </summary>
            <param name="redisKey"></param>
            <param name="redisValue"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Helper.RedisHelper.ListLeftPopAsync(System.String)">
            <summary>
            移除并返回存储在该键列表的第一个元素
            </summary>
            <param name="redisKey"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Helper.RedisHelper.ListRightPopAsync(System.String)">
            <summary>
            移除并返回存储在该键列表的最后一个元素
            </summary>
            <param name="redisKey"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Helper.RedisHelper.ListRemoveAsync(System.String,System.String)">
            <summary>
            移除列表指定键上与该值相同的元素
            </summary>
            <param name="redisKey"></param>
            <param name="redisValue"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Helper.RedisHelper.ListRightPushAsync(System.String,System.String)">
            <summary>
            在列表尾部插入值。如果键不存在，先创建再插入值
            </summary>
            <param name="redisKey"></param>
            <param name="redisValue"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Helper.RedisHelper.ListLeftPushAsync(System.String,System.String)">
            <summary>
            在列表头部插入值。如果键不存在，先创建再插入值
            </summary>
            <param name="redisKey"></param>
            <param name="redisValue"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Helper.RedisHelper.ListLengthAsync(System.String)">
            <summary>
            返回列表上该键的长度，如果不存在，返回 0
            </summary>
            <param name="redisKey"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Helper.RedisHelper.ListRangeAsync(System.String)">
            <summary>
            返回在该列表上键所对应的元素
            </summary>
            <param name="redisKey"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Helper.RedisHelper.ListLeftPopAsync``1(System.String)">
            <summary>
            移除并返回存储在该键列表的第一个元素
            </summary>
            <param name="redisKey"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Helper.RedisHelper.ListRightPopAsync``1(System.String)">
            <summary>
            移除并返回存储在该键列表的最后一个元素
            </summary>
            <param name="redisKey"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Helper.RedisHelper.ListRightPushAsync``1(System.String,``0)">
            <summary>
            在列表尾部插入值。如果键不存在，先创建再插入值
            </summary>
            <param name="redisKey"></param>
            <param name="redisValue"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Helper.RedisHelper.ListLeftPushAsync``1(System.String,``0)">
            <summary>
            在列表头部插入值。如果键不存在，先创建再插入值
            </summary>
            <param name="redisKey"></param>
            <param name="redisValue"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Helper.RedisHelper.SortedSetAdd(System.String,System.String,System.Double)">
            <summary>
            SortedSet 新增
            </summary>
            <param name="redisKey"></param>
            <param name="member"></param>
            <param name="score"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Helper.RedisHelper.SortedSetRangeByRank(System.String)">
            <summary>
            在有序集合中返回指定范围的元素，默认情况下从低到高。
            </summary>
            <param name="redisKey"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Helper.RedisHelper.SortedSetLength(System.String)">
            <summary>
            返回有序集合的元素个数
            </summary>
            <param name="redisKey"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Helper.RedisHelper.SortedSetLength(System.String,System.String)">
            <summary>
            返回有序集合的元素个数
            </summary>
            <param name="redisKey"></param>
            <param name="memebr"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Helper.RedisHelper.SortedSetAdd``1(System.String,``0,System.Double)">
            <summary>
            SortedSet 新增
            </summary>
            <param name="redisKey"></param>
            <param name="member"></param>
            <param name="score"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Helper.RedisHelper.SortedSetAddAsync(System.String,System.String,System.Double)">
            <summary>
            SortedSet 新增
            </summary>
            <param name="redisKey"></param>
            <param name="member"></param>
            <param name="score"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Helper.RedisHelper.SortedSetRangeByRankAsync(System.String)">
            <summary>
            在有序集合中返回指定范围的元素，默认情况下从低到高。
            </summary>
            <param name="redisKey"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Helper.RedisHelper.SortedSetLengthAsync(System.String)">
            <summary>
            返回有序集合的元素个数
            </summary>
            <param name="redisKey"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Helper.RedisHelper.SortedSetRemoveAsync(System.String,System.String)">
            <summary>
            返回有序集合的元素个数
            </summary>
            <param name="redisKey"></param>
            <param name="memebr"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Helper.RedisHelper.SortedSetAddAsync``1(System.String,``0,System.Double)">
            <summary>
            SortedSet 新增
            </summary>
            <param name="redisKey"></param>
            <param name="member"></param>
            <param name="score"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Helper.RedisHelper.KeyDelete(System.String)">
            <summary>
            移除指定 Key
            </summary>
            <param name="redisKey"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Helper.RedisHelper.KeyDelete(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            移除指定 Key
            </summary>
            <param name="redisKeys"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Helper.RedisHelper.KeyExists(System.String)">
            <summary>
            校验 Key 是否存在
            </summary>
            <param name="redisKey"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Helper.RedisHelper.KeyRename(System.String,System.String)">
            <summary>
            重命名 Key
            </summary>
            <param name="redisKey"></param>
            <param name="redisNewKey"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Helper.RedisHelper.KeyExpire(System.String,System.Nullable{System.TimeSpan})">
            <summary>
            设置 Key 的时间
            </summary>
            <param name="redisKey"></param>
            <param name="expiry"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Helper.RedisHelper.KeyDeleteAsync(System.String)">
            <summary>
            移除指定 Key
            </summary>
            <param name="redisKey"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Helper.RedisHelper.KeyDeleteAsync(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            移除指定 Key
            </summary>
            <param name="redisKeys"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Helper.RedisHelper.KeyExistsAsync(System.String)">
            <summary>
            校验 Key 是否存在
            </summary>
            <param name="redisKey"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Helper.RedisHelper.KeyRenameAsync(System.String,System.String)">
            <summary>
            重命名 Key
            </summary>
            <param name="redisKey"></param>
            <param name="redisNewKey"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Helper.RedisHelper.KeyExpireAsync(System.String,System.Nullable{System.TimeSpan})">
            <summary>
            设置 Key 的时间
            </summary>
            <param name="redisKey"></param>
            <param name="expiry"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Helper.RedisHelper.AddKeyPrefix(System.String)">
            <summary>
            添加 Key 的前缀
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Helper.RedisHelper.AddRegisterEvent">
            <summary>
            添加注册事件
            </summary>
        </member>
        <member name="M:Smart.Standard.Helper.RedisHelper.ConnMultiplexer_ConfigurationChangedBroadcast(System.Object,StackExchange.Redis.EndPointEventArgs)">
            <summary>
            重新配置广播时（通常意味着主从同步更改）
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Smart.Standard.Helper.RedisHelper.ConnMultiplexer_InternalError(System.Object,StackExchange.Redis.InternalErrorEventArgs)">
            <summary>
            发生内部错误时（主要用于调试）
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Smart.Standard.Helper.RedisHelper.ConnMultiplexer_HashSlotMoved(System.Object,StackExchange.Redis.HashSlotMovedEventArgs)">
            <summary>
            更改集群时
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Smart.Standard.Helper.RedisHelper.ConnMultiplexer_ConfigurationChanged(System.Object,StackExchange.Redis.EndPointEventArgs)">
            <summary>
            配置更改时
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Smart.Standard.Helper.RedisHelper.ConnMultiplexer_ErrorMessage(System.Object,StackExchange.Redis.RedisErrorEventArgs)">
            <summary>
            发生错误时
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Smart.Standard.Helper.RedisHelper.ConnMultiplexer_ConnectionFailed(System.Object,StackExchange.Redis.ConnectionFailedEventArgs)">
            <summary>
            物理连接失败时
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Smart.Standard.Helper.RedisHelper.ConnMultiplexer_ConnectionRestored(System.Object,StackExchange.Redis.ConnectionFailedEventArgs)">
            <summary>
            建立物理连接时
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Smart.Standard.Helper.RedisHelper.Serialize(System.Object)">
            <summary>
            序列化
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Helper.RedisHelper.Deserialize``1(System.Byte[])">
            <summary>
            反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="T:Smart.Standard.Helper.SerilizeHelper">
            <summary>
            XML序列化辅助类
            </summary>
        </member>
        <member name="M:Smart.Standard.Helper.SerilizeHelper.JObjectParse(System.String)">
            <summary>
            解析为JObject
            <para>可后续使用JObject进行属性获取等其它操作</para>
            </summary>
            <param name="json">json字符串</param>
            <returns><see cref="T:Newtonsoft.Json.Linq.JObject"/>对象</returns>
        </member>
        <member name="M:Smart.Standard.Helper.SerilizeHelper.GetJObjectValue(System.String,System.String)">
            <summary>
            获得某个json对象下一层指定值
            </summary>
            <param name="json"></param>
            <param name="subJObjectValue"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Helper.SerilizeHelper.DeserilizeJson``1(System.String)">
            <summary>
            转换为实体
            </summary>
            <param name="jsonString"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Helper.SerilizeHelper.SerilizeToJson``1(``0)">
            <summary>
            转换为实体
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Helper.SerilizeHelper.InitJsonSetting">
            <summary>
            初始化Json序列化设置
            </summary>
            <returns>Json序列化设置</returns>
        </member>
        <member name="M:Smart.Standard.Helper.SerilizeHelper.SerilizeToJson``1(System.Collections.Generic.IList{``0})">
            <summary>
            序列化为Json字符串
            </summary>
        </member>
        <member name="M:Smart.Standard.Helper.SerilizeHelper.FormatJson(System.String)">
            <summary>
            格式化Json字符串
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Helper.SerilizeHelper.SerilizeToXml``1(``0)">
            <summary>
            序列化为内存流MemoryStream
            </summary>
            <param name="objectToSerilize">要序列化的对象实例</param>
            <returns>内存流MemoryStream</returns>
        </member>
        <member name="M:Smart.Standard.Helper.SerilizeHelper.SerilizeToXml``1(``0,System.Text.Encoding)">
            <summary>
            序列化为内存流MemoryStream
            </summary>
            <param name="objectToSerilize">要序列化的对象实例</param>
            <param name="encoding">编码</param>
            <returns>内存流MemoryStream</returns>
        </member>
        <member name="M:Smart.Standard.Helper.SerilizeHelper.DeserilizeXml``1(System.String)">
            <summary>
            MemoryStream反序列化为对象
            </summary>
            <param name="input">输入流</param>
            <returns>对象实例</returns>
        </member>
        <member name="M:Smart.Standard.Helper.SerilizeHelper.DeserilizeXml``1(System.String,System.Text.Encoding)">
            <summary>
            MemoryStream反序列化为对象
            </summary>
            <param name="encoding">编码</param>
            <param name="input">输入流</param>
            <returns>对象实例</returns>
        </member>
        <member name="M:Smart.Standard.Helper.SerilizeHelper.SerilizeToFile``1(``0,System.String)">
            <summary>
            序列化到XML文件
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="objectToSerilize">要序列化的对象实例</param>
            <param name="fileName">文件名</param>
        </member>
        <member name="M:Smart.Standard.Helper.SerilizeHelper.DeserilizeFile``1(System.String)">
            <summary>
            反序列化文件
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="fileName">反序列化要读取的文件名</param>
            <returns>对象实例</returns>
        </member>
        <member name="M:Smart.Standard.Helper.SerilizeHelper.SerilizeToStreamBinary``1(``0)">
            <summary>
            BinaryFormatter序列化
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="objectToSerilize">要序列化的对象实例</param>
            <returns>MemoryStream对象</returns>
        </member>
        <member name="M:Smart.Standard.Helper.SerilizeHelper.SerilizeToStreamBinary``1(``0,System.Text.Encoding)">
            <summary>
            BinaryFormatter序列化
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="objectToSerilize">要序列化的对象实例</param>
            <param name="encoding">编码</param>
            <returns>MemoryStream对象</returns>
        </member>
        <member name="M:Smart.Standard.Helper.SerilizeHelper.SerilizeToBytes``1(``0)">
            <summary>
            序列化为byte数组
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="objectToSerilize">要序列化的对象实例</param>
            <returns>序列化后的byte数组</returns>
        </member>
        <member name="M:Smart.Standard.Helper.SerilizeHelper.DeserilizeFromBytes``1(System.Byte[])">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Helper.SerilizeHelper.DeserilizeStreamBinary``1(System.String)">
            <summary>
            BinaryFormatter反序列化
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="input">用于反序列化的MemoryStream流</param>
            <returns>对象实例</returns>
        </member>
        <member name="M:Smart.Standard.Helper.SerilizeHelper.DeserilizeStreamBinary``1(System.String,System.Text.Encoding)">
            <summary>
            BinaryFormatter反序列化
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="encoding">编码</param>
            <param name="input">用于反序列化的MemoryStream流</param>
            <returns>对象实例</returns>
            
        </member>
        <member name="M:Smart.Standard.Helper.SerilizeHelper.StreamToString(System.IO.MemoryStream,System.Text.Encoding)">
            <summary>
            MemoryStream转换为String
            </summary>
            <param name="ms">需要转换的MemoryStream</param>
            <param name="encoding">编码</param>
            <returns>转换后的String</returns>
        </member>
        <member name="M:Smart.Standard.Helper.SerilizeHelper.StringToStream(System.String,System.Text.Encoding)">
            <summary>
            String转换为Stream
            </summary>
            <param name="s">要转换的String</param>
            <param name="encoding">编码</param>
            <returns>转换后的MemoryStream</returns>
        </member>
        <member name="M:Smart.Standard.Helper.SerilizeHelper.FormatXml(System.String)">
            <summary>
            XML格式化输出
            </summary>
            <param name="sUnformattedXml"></param>
            <returns></returns>
        </member>
        <member name="T:Smart.Standard.Helper.SmartPathHelper">
            <summary>
            相对路径和绝对路径相互转换
            </summary>
        </member>
        <member name="M:Smart.Standard.Helper.SmartPathHelper.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="relativePath">相对路径</param>
            <param name="absolutePath">绝对路径</param>
        </member>
        <member name="P:Smart.Standard.Helper.SmartPathHelper.RelativePath">
            <summary>
            相对路径
            </summary>
        </member>
        <member name="P:Smart.Standard.Helper.SmartPathHelper.AbsolutePath">
            <summary>
            绝对路径
            </summary>
        </member>
        <member name="T:Smart.Standard.Helper.SqlHelper">
            <summary>
            Sql操作辅助类
            </summary>
        </member>
        <member name="M:Smart.Standard.Helper.SqlHelper.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="sql"></param>
        </member>
        <member name="M:Smart.Standard.Helper.SqlHelper.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Smart.Standard.Helper.SqlHelper.Append(System.String)">
            <summary>
            Append
            </summary>
        </member>
        <member name="M:Smart.Standard.Helper.SqlHelper.Where(System.String)">
            <summary>
            Where
            </summary>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Helper.SqlHelper.And(System.String)">
            <summary>
            And
            </summary>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Helper.SqlHelper.Select(System.Object[])">
            <summary>
            Select
            </summary>
            <param name="columns"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Helper.SqlHelper.From(System.Object[])">
            <summary>
            From
            </summary>
            <param name="tables"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Helper.SqlHelper.GroupBy(System.Object[])">
            <summary>
            GroupBy
            </summary>
            <param name="columns"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Helper.SqlHelper.InnerJoin(System.String)">
            <summary>
            InnerJoin
            </summary>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Helper.SqlHelper.LeftJoin(System.String)">
            <summary>
            LeftJoin
            </summary>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Helper.SqlHelper.RightJoin(System.String)">
            <summary>
            RightJoin
            </summary>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Helper.SqlHelper.On(System.String)">
            <summary>
            On
            </summary>
            <param name="onClause"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Helper.SqlHelper.OrderBy(System.Object[])">
            <summary>
             ORDER BY
            </summary>
            <param name="columns"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Helper.SqlHelper.Or(System.String)">
            <summary>
            OR
            </summary>
            <param name="orClause"></param>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Helper.SqlHelper.ToString">
            <summary>
            ToString
            </summary>
            <returns></returns>
        </member>
        <member name="T:Smart.Standard.Helper.StreamByteHelper">
            <summary>
            流、字节、图片辅助类
            </summary>
        </member>
        <member name="M:Smart.Standard.Helper.StreamByteHelper.StreamToBytes(System.IO.Stream)">
            <summary>
            将 Stream 转成 byte[]
            </summary>
        </member>
        <member name="M:Smart.Standard.Helper.StreamByteHelper.BytesToStream(System.Byte[])">
            <summary>
            将 byte[] 转成 Stream
            </summary>
        </member>
        <member name="T:Smart.Standard.Helper.ThreadMultiHelper">
            <summary>
            多线程帮助类
            </summary>
        </member>
        <member name="T:Smart.Standard.Helper.ThreadMultiHelper.DelegateComplete">
            <summary>
            声明线程完成委托
            </summary>
        </member>
        <member name="T:Smart.Standard.Helper.ThreadMultiHelper.DelegateWork">
            <summary>
            声明线程执行的任务委托
            </summary>
        </member>
        <member name="F:Smart.Standard.Helper.ThreadMultiHelper.CompleteEvent">
            <summary>
            线程完成委托
            </summary>
        </member>
        <member name="F:Smart.Standard.Helper.ThreadMultiHelper.WorkMethod">
            <summary>
            线程执行的任务委托
            </summary>
        </member>
        <member name="M:Smart.Standard.Helper.ThreadMultiHelper.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="taskcount">任务数量</param>
        </member>
        <member name="M:Smart.Standard.Helper.ThreadMultiHelper.#ctor(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="taskcount">任务数量</param>
            <param name="threadCount">执行线程数</param>
        </member>
        <member name="M:Smart.Standard.Helper.ThreadMultiHelper.Start">
            <summary>
            开始执行线程任务
            </summary>
        </member>
        <member name="T:Smart.Standard.Helper.TsqlHelper">
            <summary>
            TSQL辅助类
            </summary>
        </member>
        <member name="M:Smart.Standard.Helper.TsqlHelper.AnalyseTsqlParameters(System.String)">
            <summary>
            解析TSQL语句参数
            </summary>
            <param name="tsqlString">TSQL语句字符串</param>
            <returns>返回参数列表</returns>
        </member>
        <member name="M:Smart.Standard.Helper.TsqlHelper.SqlTypeStringToDbType(System.String)">
            <summary>
            SQLType转换为对应的DbType
            </summary>
            <param name="sqlTypeWithPrecision">SQLType字符（包含长度信息）</param>
            <returns>返回DbType枚举</returns>
        </member>
        <member name="T:Smart.Standard.Helper.ZipHelper">
            <summary>
            使用SharpZipLib来完成打包解包
            </summary>
        </member>
        <member name="M:Smart.Standard.Helper.ZipHelper.Pack(System.String,System.String)">
            <summary>
            打包
            </summary>
            <param name="zipFileName">输出压缩文件名称</param>
            <param name="sourceFolderName">需要压缩的文件夹名称</param>
            <returns>成功true,失败false</returns>
        </member>
        <member name="M:Smart.Standard.Helper.ZipHelper.Unpack(System.String,System.String)">
            <summary>
            解包
            </summary>
            <param name="zipFileName">压缩文件名称</param>
            <param name="targetFolderName">解压缩的目标文件夹名称</param>
            <returns>成功true,失败false</returns>
        </member>
        <member name="M:Smart.Standard.Helper.ZipHelper.CreateZipComponent">
            <summary>
            创建
            </summary>
            <returns></returns>
        </member>
        <member name="M:Smart.Standard.Helper.ZipHelper.ZipFileWithPassword(System.String,System.String,System.String)">
            <summary>
            压缩文件(附带密码)
            </summary>
            <param name="inputFileName">待压缩的文件名称</param>
            <param name="outZipFileName">压缩后的文件名称</param>
            <param name="password">压缩密码</param>
            <returns>成功返回True</returns>
        </member>
        <member name="M:Smart.Standard.Helper.ZipHelper.UnZipFileWithPassword(System.String,System.String,System.String)">
            <summary>
            解压文件(附带密码)
            </summary>
            <param name="zipFileName">压缩文件名称</param>
            <param name="unZipFileName">解压后文件名</param>
            <param name="password">密码</param>
            <returns>成功返回true</returns>
        </member>
        <member name="T:Smart.Standard.Interface.IDependency">
            <summary>
            依赖注入接口
            </summary>
        </member>
        <member name="T:Smart.Standard.Interface.IKey">
            <summary>
            键支持
            <remarks>
            此接口用于实体，将ID主键都转为string主键
            </remarks>
            </summary>
        </member>
        <member name="P:Smart.Standard.Interface.IKey.Key">
            <summary>
            主键
            </summary>
        </member>
        <member name="T:Smart.Standard.Model.PageResult`1">
            <summary>
            分页
            </summary>
        </member>
        <member name="P:Smart.Standard.Model.PageResult`1.Rows">
            <summary>
            查询记录
            </summary>
        </member>
        <member name="P:Smart.Standard.Model.PageResult`1.TotalCount">
            <summary>
            总记录数
            </summary>
        </member>
        <member name="P:Smart.Standard.Model.PageResult`1.PageIndex">
            <summary>
            当前页
            </summary>
        </member>
        <member name="P:Smart.Standard.Model.PageResult`1.PageSize">
            <summary>
            每页显示数
            </summary>
        </member>
        <member name="T:Smart.Standard.ParseProviders.IParseProvider">
            <summary>
            解析提供者接口
            </summary>
        </member>
        <member name="P:Smart.Standard.ParseProviders.IParseProvider.Name">
            <summary>
            提供者名称
            </summary>
        </member>
        <member name="M:Smart.Standard.ParseProviders.IParseProvider.Pack``1(``0)">
            <summary>
            封包对象
            </summary>
            <typeparam name="T">要封包的对象类型</typeparam>
            <param name="data">要封包的对象</param>
            <returns>封包后的string字符串</returns>
        </member>
        <member name="M:Smart.Standard.ParseProviders.IParseProvider.Parse``1(System.String)">
            <summary>
            解包对象
            </summary>
            <typeparam name="T">解包后的对象类型</typeparam>
            <param name="value">要解包的字符串</param>
            <returns>解包后的对象</returns>
        </member>
        <member name="M:Smart.Standard.ParseProviders.IParseProvider.Format(System.String)">
            <summary>
            格式化字符串
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="T:Smart.Standard.ParseProviders.JsonParseProvider">
            <inheritdoc />
            <summary>
            Json序列化提供者
            </summary>
        </member>
        <member name="P:Smart.Standard.ParseProviders.JsonParseProvider.ProviderName">
            <summary>
            Json序列化提供者
            </summary>
        </member>
        <member name="M:Smart.Standard.ParseProviders.JsonParseProvider.Pack``1(``0)">
            <inheritdoc />
            <summary>
            打包
            </summary>
        </member>
        <member name="M:Smart.Standard.ParseProviders.JsonParseProvider.Parse``1(System.String)">
            <inheritdoc />
            <summary>
            解析
            </summary>
        </member>
        <member name="M:Smart.Standard.ParseProviders.JsonParseProvider.Format(System.String)">
            <inheritdoc />
            <summary>
            格式化json字符串
            </summary>
            <param name="jsonstr"></param>
            <returns></returns>
        </member>
        <member name="P:Smart.Standard.ParseProviders.JsonParseProvider.Name">
            <inheritdoc />
            <summary>
            Json序列化提供者
            </summary>
        </member>
        <member name="T:Smart.Standard.ParseProviders.ParserFactory">
            <summary>
            序列化提供者工厂
            </summary>
        </member>
        <member name="M:Smart.Standard.ParseProviders.ParserFactory.GetParser(System.String,System.Boolean)">
            <summary>
            获取对应providerName的IParseProvider接口实例对象
            </summary>
            <param name="providerName">提供者名称</param>
            <param name="noParserThrow">不存在对应名称的解析器，true则抛出异常，false则返回null</param>
            <returns>对应providerName的IParseProvider接口实例对象</returns>
        </member>
        <member name="P:Smart.Standard.ParseProviders.ParserFactory.JsonParser">
            <summary>
            Json解析器
            </summary>
        </member>
        <member name="P:Smart.Standard.ParseProviders.ParserFactory.XmlParser">
            <summary>
            Xml解析器
            </summary>
        </member>
        <member name="T:Smart.Standard.ParseProviders.XmlParseProvider">
            <summary>
            Xml序列化提供者
            </summary>
        </member>
        <member name="P:Smart.Standard.ParseProviders.XmlParseProvider.ProviderName">
            <summary>
            Xml序列化提供者
            </summary>
        </member>
        <member name="M:Smart.Standard.ParseProviders.XmlParseProvider.Pack``1(``0)">
            <summary>
            打包
            </summary>
        </member>
        <member name="M:Smart.Standard.ParseProviders.XmlParseProvider.Parse``1(System.String)">
            <inheritdoc />
            <summary>
            解析
            </summary>
        </member>
        <member name="M:Smart.Standard.ParseProviders.XmlParseProvider.Format(System.String)">
            <inheritdoc />
            <summary>
            格式化
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="P:Smart.Standard.ParseProviders.XmlParseProvider.Name">
            <inheritdoc />
            <summary>
            Xml序列化提供者
            </summary>
        </member>
    </members>
</doc>
